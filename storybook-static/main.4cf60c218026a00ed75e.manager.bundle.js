(self.webpackChunk_fluentui_fluentui_repo = self.webpackChunk_fluentui_fluentui_repo || []).push([
  [179],
  {
    70967: (__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {
      'use strict';
      var esm = __webpack_require__(1173),
        types = __webpack_require__(96899);
      let ADDON_ID = 'storybook/fluentui-react-addon',
        THEME_ID = `${ADDON_ID}/theme`,
        STRICT_MODE_ID = `${ADDON_ID}/strict-mode`;
      var react = __webpack_require__(67294),
        index_681e4b07 = __webpack_require__(94601),
        dist_esm = __webpack_require__(86141);
      let grey = {
          0: '#000000',
          2: '#050505',
          4: '#0a0a0a',
          6: '#0f0f0f',
          8: '#141414',
          10: '#1a1a1a',
          12: '#1f1f1f',
          14: '#242424',
          16: '#292929',
          18: '#2e2e2e',
          20: '#333333',
          22: '#383838',
          24: '#3d3d3d',
          26: '#424242',
          28: '#474747',
          30: '#4d4d4d',
          32: '#525252',
          34: '#575757',
          36: '#5c5c5c',
          38: '#616161',
          40: '#666666',
          42: '#6b6b6b',
          44: '#707070',
          46: '#757575',
          48: '#7a7a7a',
          50: '#808080',
          52: '#858585',
          54: '#8a8a8a',
          56: '#8f8f8f',
          58: '#949494',
          60: '#999999',
          62: '#9e9e9e',
          64: '#a3a3a3',
          66: '#a8a8a8',
          68: '#adadad',
          70: '#b3b3b3',
          72: '#b8b8b8',
          74: '#bdbdbd',
          76: '#c2c2c2',
          78: '#c7c7c7',
          80: '#cccccc',
          82: '#d1d1d1',
          84: '#d6d6d6',
          86: '#dbdbdb',
          88: '#e0e0e0',
          90: '#e6e6e6',
          92: '#ebebeb',
          94: '#f0f0f0',
          96: '#f5f5f5',
          98: '#fafafa',
          100: '#ffffff',
        },
        whiteAlpha = {
          5: 'rgba(255, 255, 255, 0.05)',
          10: 'rgba(255, 255, 255, 0.1)',
          20: 'rgba(255, 255, 255, 0.2)',
          30: 'rgba(255, 255, 255, 0.3)',
          40: 'rgba(255, 255, 255, 0.4)',
          50: 'rgba(255, 255, 255, 0.5)',
          60: 'rgba(255, 255, 255, 0.6)',
          70: 'rgba(255, 255, 255, 0.7)',
          80: 'rgba(255, 255, 255, 0.8)',
          90: 'rgba(255, 255, 255, 0.9)',
        },
        blackAlpha = {
          5: 'rgba(0, 0, 0, 0.05)',
          10: 'rgba(0, 0, 0, 0.1)',
          20: 'rgba(0, 0, 0, 0.2)',
          30: 'rgba(0, 0, 0, 0.3)',
          40: 'rgba(0, 0, 0, 0.4)',
          50: 'rgba(0, 0, 0, 0.5)',
          60: 'rgba(0, 0, 0, 0.6)',
          70: 'rgba(0, 0, 0, 0.7)',
          80: 'rgba(0, 0, 0, 0.8)',
          90: 'rgba(0, 0, 0, 0.9)',
        },
        grey14Alpha = {
          5: 'rgba(36, 36, 36, 0.05)',
          10: 'rgba(36, 36, 36, 0.1)',
          20: 'rgba(36, 36, 36, 0.2)',
          30: 'rgba(36, 36, 36, 0.3)',
          40: 'rgba(36, 36, 36, 0.4)',
          50: 'rgba(36, 36, 36, 0.5)',
          60: 'rgba(36, 36, 36, 0.6)',
          70: 'rgba(36, 36, 36, 0.7)',
          80: 'rgba(36, 36, 36, 0.8)',
          90: 'rgba(36, 36, 36, 0.9)',
        },
        white = '#ffffff',
        black = '#000000',
        hcHyperlink = '#ffff00',
        hcHighlight = '#1aebff',
        hcDisabled = '#3ff23f',
        hcCanvas = '#000000',
        hcCanvasText = '#ffffff',
        hcHighlightText = '#000000',
        hcButtonText = '#000000',
        hcButtonFace = '#ffffff',
        darkRed = {
          shade50: '#130204',
          shade40: '#230308',
          shade30: '#420610',
          shade20: '#590815',
          shade10: '#690a19',
          primary: '#750b1c',
          tint10: '#861b2c',
          tint20: '#962f3f',
          tint30: '#ac4f5e',
          tint40: '#d69ca5',
          tint50: '#e9c7cd',
          tint60: '#f9f0f2',
        },
        cranberry = {
          shade50: '#200205',
          shade40: '#3b0509',
          shade30: '#6e0811',
          shade20: '#960b18',
          shade10: '#b10e1c',
          primary: '#c50f1f',
          tint10: '#cc2635',
          tint20: '#d33f4c',
          tint30: '#dc626d',
          tint40: '#eeacb2',
          tint50: '#f6d1d5',
          tint60: '#fdf3f4',
        },
        red = {
          shade50: '#210809',
          shade40: '#3f1011',
          shade30: '#751d1f',
          shade20: '#9f282b',
          shade10: '#bc2f32',
          primary: '#d13438',
          tint10: '#d7494c',
          tint20: '#dc5e62',
          tint30: '#e37d80',
          tint40: '#f1bbbc',
          tint50: '#f8dadb',
          tint60: '#fdf6f6',
        },
        darkOrange = {
          shade50: '#230900',
          shade40: '#411200',
          shade30: '#7a2101',
          shade20: '#a62d01',
          shade10: '#c43501',
          primary: '#da3b01',
          tint10: '#de501c',
          tint20: '#e36537',
          tint30: '#e9835e',
          tint40: '#f4bfab',
          tint50: '#f9dcd1',
          tint60: '#fdf6f3',
        },
        pumpkin = {
          shade50: '#200d03',
          shade40: '#3d1805',
          shade30: '#712d09',
          shade20: '#9a3d0c',
          shade10: '#b6480e',
          primary: '#ca5010',
          tint10: '#d06228',
          tint20: '#d77440',
          tint30: '#df8e64',
          tint40: '#efc4ad',
          tint50: '#f7dfd2',
          tint60: '#fdf7f4',
        },
        peach = {
          shade50: '#291600',
          shade40: '#4d2a00',
          shade30: '#8f4e00',
          shade20: '#c26a00',
          shade10: '#e67e00',
          primary: '#ff8c00',
          tint10: '#ff9a1f',
          tint20: '#ffa83d',
          tint30: '#ffba66',
          tint40: '#ffddb3',
          tint50: '#ffedd6',
          tint60: '#fffaf5',
        },
        marigold = {
          shade50: '#251a00',
          shade40: '#463100',
          shade30: '#835b00',
          shade20: '#b27c00',
          shade10: '#d39300',
          primary: '#eaa300',
          tint10: '#edad1c',
          tint20: '#efb839',
          tint30: '#f2c661',
          tint40: '#f9e2ae',
          tint50: '#fcefd3',
          tint60: '#fefbf4',
        },
        yellow = {
          primary: '#fde300',
          shade10: '#e4cc00',
          shade20: '#c0ad00',
          shade30: '#817400',
          shade40: '#4c4400',
          shade50: '#282400',
          tint10: '#fde61e',
          tint20: '#fdea3d',
          tint30: '#feee66',
          tint40: '#fef7b2',
          tint50: '#fffad6',
          tint60: '#fffef5',
        },
        gold = {
          shade50: '#1f1900',
          shade40: '#3a2f00',
          shade30: '#6c5700',
          shade20: '#937700',
          shade10: '#ae8c00',
          primary: '#c19c00',
          tint10: '#c8a718',
          tint20: '#d0b232',
          tint30: '#dac157',
          tint40: '#ecdfa5',
          tint50: '#f5eece',
          tint60: '#fdfbf2',
        },
        brass = {
          shade50: '#181202',
          shade40: '#2e2103',
          shade30: '#553e06',
          shade20: '#745408',
          shade10: '#89640a',
          primary: '#986f0b',
          tint10: '#a47d1e',
          tint20: '#b18c34',
          tint30: '#c1a256',
          tint40: '#e0cea2',
          tint50: '#efe4cb',
          tint60: '#fbf8f2',
        },
        brown = {
          shade50: '#170e07',
          shade40: '#2b1a0e',
          shade30: '#50301a',
          shade20: '#6c4123',
          shade10: '#804d29',
          primary: '#8e562e',
          tint10: '#9c663f',
          tint20: '#a97652',
          tint30: '#bb8f6f',
          tint40: '#ddc3b0',
          tint50: '#edded3',
          tint60: '#faf7f4',
        },
        forest = {
          shade50: '#0c1501',
          shade40: '#162702',
          shade30: '#294903',
          shade20: '#376304',
          shade10: '#427505',
          primary: '#498205',
          tint10: '#599116',
          tint20: '#6ba02b',
          tint30: '#85b44c',
          tint40: '#bdd99b',
          tint50: '#dbebc7',
          tint60: '#f6faf0',
        },
        seafoam = {
          shade50: '#002111',
          shade40: '#003d20',
          shade30: '#00723b',
          shade20: '#009b51',
          shade10: '#00b85f',
          primary: '#00cc6a',
          tint10: '#19d279',
          tint20: '#34d889',
          tint30: '#5ae0a0',
          tint40: '#a8f0cd',
          tint50: '#cff7e4',
          tint60: '#f3fdf8',
        },
        lightGreen = {
          shade50: '#031a02',
          shade40: '#063004',
          shade30: '#0b5a08',
          shade20: '#0e7a0b',
          shade10: '#11910d',
          primary: '#13a10e',
          tint10: '#27ac22',
          tint20: '#3db838',
          tint30: '#5ec75a',
          tint40: '#a7e3a5',
          tint50: '#cef0cd',
          tint60: '#f2fbf2',
        },
        green = {
          shade50: '#031403',
          shade40: '#052505',
          shade30: '#094509',
          shade20: '#0c5e0c',
          shade10: '#0e700e',
          primary: '#107c10',
          tint10: '#218c21',
          tint20: '#359b35',
          tint30: '#54b054',
          tint40: '#9fd89f',
          tint50: '#c9eac9',
          tint60: '#f1faf1',
        },
        darkGreen = {
          shade50: '#021102',
          shade40: '#032003',
          shade30: '#063b06',
          shade20: '#085108',
          shade10: '#0a5f0a',
          primary: '#0b6a0b',
          tint10: '#1a7c1a',
          tint20: '#2d8e2d',
          tint30: '#4da64d',
          tint40: '#9ad29a',
          tint50: '#c6e7c6',
          tint60: '#f0f9f0',
        },
        lightTeal = {
          shade50: '#001d1f',
          shade40: '#00373a',
          shade30: '#00666d',
          shade20: '#008b94',
          shade10: '#00a5af',
          primary: '#00b7c3',
          tint10: '#18bfca',
          tint20: '#32c8d1',
          tint30: '#58d3db',
          tint40: '#a6e9ed',
          tint50: '#cef3f5',
          tint60: '#f2fcfd',
        },
        teal = {
          shade50: '#001516',
          shade40: '#012728',
          shade30: '#02494c',
          shade20: '#026467',
          shade10: '#037679',
          primary: '#038387',
          tint10: '#159195',
          tint20: '#2aa0a4',
          tint30: '#4cb4b7',
          tint40: '#9bd9db',
          tint50: '#c7ebec',
          tint60: '#f0fafa',
        },
        steel = {
          shade50: '#000f12',
          shade40: '#001b22',
          shade30: '#00333f',
          shade20: '#004555',
          shade10: '#005265',
          primary: '#005b70',
          tint10: '#0f6c81',
          tint20: '#237d92',
          tint30: '#4496a9',
          tint40: '#94c8d4',
          tint50: '#c3e1e8',
          tint60: '#eff7f9',
        },
        blue = {
          shade50: '#001322',
          shade40: '#002440',
          shade30: '#004377',
          shade20: '#005ba1',
          shade10: '#006cbf',
          primary: '#0078d4',
          tint10: '#1a86d9',
          tint20: '#3595de',
          tint30: '#5caae5',
          tint40: '#a9d3f2',
          tint50: '#d0e7f8',
          tint60: '#f3f9fd',
        },
        royalBlue = {
          shade50: '#000c16',
          shade40: '#00172a',
          shade30: '#002c4e',
          shade20: '#003b6a',
          shade10: '#00467e',
          primary: '#004e8c',
          tint10: '#125e9a',
          tint20: '#286fa8',
          tint30: '#4a89ba',
          tint40: '#9abfdc',
          tint50: '#c7dced',
          tint60: '#f0f6fa',
        },
        cornflower = {
          shade50: '#0d1126',
          shade40: '#182047',
          shade30: '#2c3c85',
          shade20: '#3c51b4',
          shade10: '#4760d5',
          primary: '#4f6bed',
          tint10: '#637cef',
          tint20: '#778df1',
          tint30: '#93a4f4',
          tint40: '#c8d1fa',
          tint50: '#e1e6fc',
          tint60: '#f7f9fe',
        },
        navy = {
          shade50: '#00061d',
          shade40: '#000c36',
          shade30: '#001665',
          shade20: '#001e89',
          shade10: '#0023a2',
          primary: '#0027b4',
          tint10: '#173bbd',
          tint20: '#3050c6',
          tint30: '#546fd2',
          tint40: '#a3b2e8',
          tint50: '#ccd5f3',
          tint60: '#f2f4fc',
        },
        lavender = {
          shade50: '#120f25',
          shade40: '#221d46',
          shade30: '#3f3682',
          shade20: '#5649b0',
          shade10: '#6656d1',
          primary: '#7160e8',
          tint10: '#8172eb',
          tint20: '#9184ee',
          tint30: '#a79cf1',
          tint40: '#d2ccf8',
          tint50: '#e7e4fb',
          tint60: '#f9f8fe',
        },
        purple = {
          shade50: '#0f0717',
          shade40: '#1c0e2b',
          shade30: '#341a51',
          shade20: '#46236e',
          shade10: '#532982',
          primary: '#5c2e91',
          tint10: '#6b3f9e',
          tint20: '#7c52ab',
          tint30: '#9470bd',
          tint40: '#c6b1de',
          tint50: '#e0d3ed',
          tint60: '#f7f4fb',
        },
        grape = {
          shade50: '#160418',
          shade40: '#29072e',
          shade30: '#4c0d55',
          shade20: '#671174',
          shade10: '#7a1589',
          primary: '#881798',
          tint10: '#952aa4',
          tint20: '#a33fb1',
          tint30: '#b55fc1',
          tint40: '#d9a7e0',
          tint50: '#eaceef',
          tint60: '#faf2fb',
        },
        berry = {
          shade50: '#1f091d',
          shade40: '#3a1136',
          shade30: '#6d2064',
          shade20: '#932b88',
          shade10: '#af33a1',
          primary: '#c239b3',
          tint10: '#c94cbc',
          tint20: '#d161c4',
          tint30: '#da7ed0',
          tint40: '#edbbe7',
          tint50: '#f5daf2',
          tint60: '#fdf5fc',
        },
        lilac = {
          shade50: '#1c0b1f',
          shade40: '#35153a',
          shade30: '#63276d',
          shade20: '#863593',
          shade10: '#9f3faf',
          primary: '#b146c2',
          tint10: '#ba58c9',
          tint20: '#c36bd1',
          tint30: '#cf87da',
          tint40: '#e6bfed',
          tint50: '#f2dcf5',
          tint60: '#fcf6fd',
        },
        pink = {
          shade50: '#24091b',
          shade40: '#441232',
          shade30: '#80215d',
          shade20: '#ad2d7e',
          shade10: '#cd3595',
          primary: '#e43ba6',
          tint10: '#e750b0',
          tint20: '#ea66ba',
          tint30: '#ef85c8',
          tint40: '#f7c0e3',
          tint50: '#fbddf0',
          tint60: '#fef6fb',
        },
        magenta = {
          shade50: '#1f0013',
          shade40: '#390024',
          shade30: '#6b0043',
          shade20: '#91005a',
          shade10: '#ac006b',
          primary: '#bf0077',
          tint10: '#c71885',
          tint20: '#ce3293',
          tint30: '#d957a8',
          tint40: '#eca5d1',
          tint50: '#f5cee6',
          tint60: '#fcf2f9',
        },
        plum = {
          shade50: '#13000c',
          shade40: '#240017',
          shade30: '#43002b',
          shade20: '#5a003b',
          shade10: '#6b0045',
          primary: '#77004d',
          tint10: '#87105d',
          tint20: '#98246f',
          tint30: '#ad4589',
          tint40: '#d696c0',
          tint50: '#e9c4dc',
          tint60: '#faf0f6',
        },
        beige = {
          shade50: '#141313',
          shade40: '#252323',
          shade30: '#444241',
          shade20: '#5d5958',
          shade10: '#6e6968',
          primary: '#7a7574',
          tint10: '#8a8584',
          tint20: '#9a9594',
          tint30: '#afabaa',
          tint40: '#d7d4d4',
          tint50: '#eae8e8',
          tint60: '#faf9f9',
        },
        mink = {
          shade50: '#0f0e0e',
          shade40: '#1c1b1a',
          shade30: '#343231',
          shade20: '#474443',
          shade10: '#54514f',
          primary: '#5d5a58',
          tint10: '#706d6b',
          tint20: '#84817e',
          tint30: '#9e9b99',
          tint40: '#cecccb',
          tint50: '#e5e4e3',
          tint60: '#f8f8f8',
        },
        platinum = {
          shade50: '#111314',
          shade40: '#1f2426',
          shade30: '#3b4447',
          shade20: '#505c60',
          shade10: '#5f6d71',
          primary: '#69797e',
          tint10: '#79898d',
          tint20: '#89989d',
          tint30: '#a0adb2',
          tint40: '#cdd6d8',
          tint50: '#e4e9ea',
          tint60: '#f8f9fa',
        },
        colors_anchor = {
          shade50: '#090a0b',
          shade40: '#111315',
          shade30: '#202427',
          shade20: '#2b3135',
          shade10: '#333a3f',
          primary: '#394146',
          tint10: '#4d565c',
          tint20: '#626c72',
          tint30: '#808a90',
          tint40: '#bcc3c7',
          tint50: '#dbdfe1',
          tint60: '#f6f7f8',
        },
        statusSharedColors = {
          red: red,
          green: green,
          darkOrange: darkOrange,
          yellow: yellow,
          berry: berry,
          lightGreen: lightGreen,
          marigold: marigold,
        },
        personaSharedColors = {
          darkRed: darkRed,
          cranberry: cranberry,
          pumpkin: pumpkin,
          peach: peach,
          gold: gold,
          brass: brass,
          brown: brown,
          forest: forest,
          seafoam: seafoam,
          darkGreen: darkGreen,
          lightTeal: lightTeal,
          teal: teal,
          steel: steel,
          blue: blue,
          royalBlue: royalBlue,
          cornflower: cornflower,
          navy: navy,
          lavender: lavender,
          purple: purple,
          grape: grape,
          lilac: lilac,
          pink: pink,
          magenta: magenta,
          plum: plum,
          beige: beige,
          mink: mink,
          platinum: platinum,
          anchor: colors_anchor,
        },
        statusSharedColorNames = ['red', 'green', 'darkOrange', 'yellow', 'berry', 'lightGreen', 'marigold'],
        personaSharedColorNames = [
          'darkRed',
          'cranberry',
          'pumpkin',
          'peach',
          'gold',
          'brass',
          'brown',
          'forest',
          'seafoam',
          'darkGreen',
          'lightTeal',
          'teal',
          'steel',
          'blue',
          'royalBlue',
          'cornflower',
          'navy',
          'lavender',
          'purple',
          'grape',
          'lilac',
          'pink',
          'magenta',
          'plum',
          'beige',
          'mink',
          'platinum',
          'anchor',
        ],
        statusColorPaletteTokens = statusSharedColorNames.reduce((acc, sharedColor) => {
          let color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1),
            sharedColorTokens = {
              [`colorPalette${color}Background1`]: statusSharedColors[sharedColor].tint60,
              [`colorPalette${color}Background2`]: statusSharedColors[sharedColor].tint40,
              [`colorPalette${color}Background3`]: statusSharedColors[sharedColor].primary,
              [`colorPalette${color}Foreground1`]: statusSharedColors[sharedColor].shade10,
              [`colorPalette${color}Foreground2`]: statusSharedColors[sharedColor].shade30,
              [`colorPalette${color}Foreground3`]: statusSharedColors[sharedColor].primary,
              [`colorPalette${color}BorderActive`]: statusSharedColors[sharedColor].primary,
              [`colorPalette${color}Border1`]: statusSharedColors[sharedColor].tint40,
              [`colorPalette${color}Border2`]: statusSharedColors[sharedColor].primary,
            };
          return Object.assign(acc, sharedColorTokens);
        }, {});
      (statusColorPaletteTokens.colorPaletteYellowForeground1 = statusSharedColors.yellow.shade30),
        (statusColorPaletteTokens.colorPaletteRedForegroundInverted = statusSharedColors.red.tint20),
        (statusColorPaletteTokens.colorPaletteGreenForegroundInverted = statusSharedColors.green.tint20),
        (statusColorPaletteTokens.colorPaletteYellowForegroundInverted = statusSharedColors.yellow.tint40);
      let personaColorPaletteTokens = personaSharedColorNames.reduce((acc, sharedColor) => {
          let color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1),
            sharedColorTokens = {
              [`colorPalette${color}Background2`]: personaSharedColors[sharedColor].tint40,
              [`colorPalette${color}Foreground2`]: personaSharedColors[sharedColor].shade30,
              [`colorPalette${color}BorderActive`]: personaSharedColors[sharedColor].primary,
            };
          return Object.assign(acc, sharedColorTokens);
        }, {}),
        colorPaletteTokens = { ...statusColorPaletteTokens, ...personaColorPaletteTokens },
        generateColorTokens = brand => ({
          colorNeutralForeground1: grey[14],
          colorNeutralForeground1Hover: grey[14],
          colorNeutralForeground1Pressed: grey[14],
          colorNeutralForeground1Selected: grey[14],
          colorNeutralForeground2: grey[26],
          colorNeutralForeground2Hover: grey[14],
          colorNeutralForeground2Pressed: grey[14],
          colorNeutralForeground2Selected: grey[14],
          colorNeutralForeground2BrandHover: brand[80],
          colorNeutralForeground2BrandPressed: brand[70],
          colorNeutralForeground2BrandSelected: brand[80],
          colorNeutralForeground3: grey[38],
          colorNeutralForeground3Hover: grey[26],
          colorNeutralForeground3Pressed: grey[26],
          colorNeutralForeground3Selected: grey[26],
          colorNeutralForeground3BrandHover: brand[80],
          colorNeutralForeground3BrandPressed: brand[70],
          colorNeutralForeground3BrandSelected: brand[80],
          colorNeutralForeground4: grey[44],
          colorNeutralForegroundDisabled: grey[74],
          colorNeutralForegroundInvertedDisabled: whiteAlpha[40],
          colorBrandForegroundLink: brand[70],
          colorBrandForegroundLinkHover: brand[60],
          colorBrandForegroundLinkPressed: brand[40],
          colorBrandForegroundLinkSelected: brand[70],
          colorNeutralForeground2Link: grey[26],
          colorNeutralForeground2LinkHover: grey[14],
          colorNeutralForeground2LinkPressed: grey[14],
          colorNeutralForeground2LinkSelected: grey[14],
          colorCompoundBrandForeground1: brand[80],
          colorCompoundBrandForeground1Hover: brand[70],
          colorCompoundBrandForeground1Pressed: brand[60],
          colorBrandForeground1: brand[80],
          colorBrandForeground2: brand[70],
          colorNeutralForeground1Static: grey[14],
          colorNeutralForegroundStaticInverted: white,
          colorNeutralForegroundInverted: white,
          colorNeutralForegroundInvertedHover: white,
          colorNeutralForegroundInvertedPressed: white,
          colorNeutralForegroundInvertedSelected: white,
          colorNeutralForegroundInverted2: white,
          colorNeutralForegroundOnBrand: white,
          colorNeutralForegroundInvertedLink: white,
          colorNeutralForegroundInvertedLinkHover: white,
          colorNeutralForegroundInvertedLinkPressed: white,
          colorNeutralForegroundInvertedLinkSelected: white,
          colorBrandForegroundInverted: brand[100],
          colorBrandForegroundInvertedHover: brand[110],
          colorBrandForegroundInvertedPressed: brand[100],
          colorBrandForegroundOnLight: brand[80],
          colorBrandForegroundOnLightHover: brand[70],
          colorBrandForegroundOnLightPressed: brand[50],
          colorBrandForegroundOnLightSelected: brand[60],
          colorNeutralBackground1: white,
          colorNeutralBackground1Hover: grey[96],
          colorNeutralBackground1Pressed: grey[88],
          colorNeutralBackground1Selected: grey[92],
          colorNeutralBackground2: grey[98],
          colorNeutralBackground2Hover: grey[94],
          colorNeutralBackground2Pressed: grey[86],
          colorNeutralBackground2Selected: grey[90],
          colorNeutralBackground3: grey[96],
          colorNeutralBackground3Hover: grey[92],
          colorNeutralBackground3Pressed: grey[84],
          colorNeutralBackground3Selected: grey[88],
          colorNeutralBackground4: grey[94],
          colorNeutralBackground4Hover: grey[98],
          colorNeutralBackground4Pressed: grey[96],
          colorNeutralBackground4Selected: white,
          colorNeutralBackground5: grey[92],
          colorNeutralBackground5Hover: grey[96],
          colorNeutralBackground5Pressed: grey[94],
          colorNeutralBackground5Selected: grey[98],
          colorNeutralBackground6: grey[90],
          colorNeutralBackgroundInverted: grey[16],
          colorNeutralBackgroundStatic: grey[20],
          colorSubtleBackground: 'transparent',
          colorSubtleBackgroundHover: grey[96],
          colorSubtleBackgroundPressed: grey[88],
          colorSubtleBackgroundSelected: grey[92],
          colorSubtleBackgroundLightAlphaHover: whiteAlpha[70],
          colorSubtleBackgroundLightAlphaPressed: whiteAlpha[50],
          colorSubtleBackgroundLightAlphaSelected: 'transparent',
          colorSubtleBackgroundInverted: 'transparent',
          colorSubtleBackgroundInvertedHover: blackAlpha[10],
          colorSubtleBackgroundInvertedPressed: blackAlpha[30],
          colorSubtleBackgroundInvertedSelected: blackAlpha[20],
          colorTransparentBackground: 'transparent',
          colorTransparentBackgroundHover: 'transparent',
          colorTransparentBackgroundPressed: 'transparent',
          colorTransparentBackgroundSelected: 'transparent',
          colorNeutralBackgroundDisabled: grey[94],
          colorNeutralBackgroundInvertedDisabled: whiteAlpha[10],
          colorNeutralStencil1: grey[90],
          colorNeutralStencil2: grey[98],
          colorNeutralStencil1Alpha: blackAlpha[10],
          colorNeutralStencil2Alpha: blackAlpha[5],
          colorBackgroundOverlay: blackAlpha[40],
          colorScrollbarOverlay: blackAlpha[50],
          colorBrandBackground: brand[80],
          colorBrandBackgroundHover: brand[70],
          colorBrandBackgroundPressed: brand[40],
          colorBrandBackgroundSelected: brand[60],
          colorCompoundBrandBackground: brand[80],
          colorCompoundBrandBackgroundHover: brand[70],
          colorCompoundBrandBackgroundPressed: brand[60],
          colorBrandBackgroundStatic: brand[80],
          colorBrandBackground2: brand[160],
          colorBrandBackgroundInverted: white,
          colorBrandBackgroundInvertedHover: brand[160],
          colorBrandBackgroundInvertedPressed: brand[140],
          colorBrandBackgroundInvertedSelected: brand[150],
          colorNeutralStrokeAccessible: grey[38],
          colorNeutralStrokeAccessibleHover: grey[34],
          colorNeutralStrokeAccessiblePressed: grey[30],
          colorNeutralStrokeAccessibleSelected: brand[80],
          colorNeutralStroke1: grey[82],
          colorNeutralStroke1Hover: grey[78],
          colorNeutralStroke1Pressed: grey[70],
          colorNeutralStroke1Selected: grey[74],
          colorNeutralStroke2: grey[88],
          colorNeutralStroke3: grey[94],
          colorNeutralStrokeOnBrand: white,
          colorNeutralStrokeOnBrand2: white,
          colorNeutralStrokeOnBrand2Hover: white,
          colorNeutralStrokeOnBrand2Pressed: white,
          colorNeutralStrokeOnBrand2Selected: white,
          colorBrandStroke1: brand[80],
          colorBrandStroke2: brand[140],
          colorCompoundBrandStroke: brand[80],
          colorCompoundBrandStrokeHover: brand[70],
          colorCompoundBrandStrokePressed: brand[60],
          colorNeutralStrokeDisabled: grey[88],
          colorNeutralStrokeInvertedDisabled: whiteAlpha[40],
          colorTransparentStroke: 'transparent',
          colorTransparentStrokeInteractive: 'transparent',
          colorTransparentStrokeDisabled: 'transparent',
          colorStrokeFocus1: white,
          colorStrokeFocus2: black,
          colorNeutralShadowAmbient: 'rgba(0,0,0,0.12)',
          colorNeutralShadowKey: 'rgba(0,0,0,0.14)',
          colorNeutralShadowAmbientLighter: 'rgba(0,0,0,0.06)',
          colorNeutralShadowKeyLighter: 'rgba(0,0,0,0.07)',
          colorNeutralShadowAmbientDarker: 'rgba(0,0,0,0.20)',
          colorNeutralShadowKeyDarker: 'rgba(0,0,0,0.24)',
          colorBrandShadowAmbient: 'rgba(0,0,0,0.30)',
          colorBrandShadowKey: 'rgba(0,0,0,0.25)',
        }),
        borderRadius = {
          borderRadiusNone: '0',
          borderRadiusSmall: '2px',
          borderRadiusMedium: '4px',
          borderRadiusLarge: '6px',
          borderRadiusXLarge: '8px',
          borderRadiusCircular: '10000px',
        },
        fontSizes = {
          fontSizeBase100: '10px',
          fontSizeBase200: '12px',
          fontSizeBase300: '14px',
          fontSizeBase400: '16px',
          fontSizeBase500: '20px',
          fontSizeBase600: '24px',
          fontSizeHero700: '28px',
          fontSizeHero800: '32px',
          fontSizeHero900: '40px',
          fontSizeHero1000: '68px',
        },
        lineHeights = {
          lineHeightBase100: '14px',
          lineHeightBase200: '16px',
          lineHeightBase300: '20px',
          lineHeightBase400: '22px',
          lineHeightBase500: '28px',
          lineHeightBase600: '32px',
          lineHeightHero700: '36px',
          lineHeightHero800: '40px',
          lineHeightHero900: '52px',
          lineHeightHero1000: '92px',
        },
        fontWeights = { fontWeightRegular: 400, fontWeightMedium: 500, fontWeightSemibold: 600, fontWeightBold: 700 },
        fontFamilies = {
          fontFamilyBase:
            "'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif",
          fontFamilyMonospace: "Consolas, 'Courier New', Courier, monospace",
          fontFamilyNumeric:
            "Bahnschrift, 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif",
        },
        strokeWidths = {
          strokeWidthThin: '1px',
          strokeWidthThick: '2px',
          strokeWidthThicker: '3px',
          strokeWidthThickest: '4px',
        };
      function createShadowTokens(ambientColor, keyColor, tokenSuffix = '') {
        return {
          [`shadow2${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 1px 2px ${keyColor}`,
          [`shadow4${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 2px 4px ${keyColor}`,
          [`shadow8${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 4px 8px ${keyColor}`,
          [`shadow16${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 8px 16px ${keyColor}`,
          [`shadow28${tokenSuffix}`]: `0 0 8px ${ambientColor}, 0 14px 28px ${keyColor}`,
          [`shadow64${tokenSuffix}`]: `0 0 8px ${ambientColor}, 0 32px 64px ${keyColor}`,
        };
      }
      let durations = {
          durationUltraFast: '50ms',
          durationFaster: '100ms',
          durationFast: '150ms',
          durationNormal: '200ms',
          durationSlow: '300ms',
          durationSlower: '400ms',
          durationUltraSlow: '500ms',
        },
        curves = {
          curveAccelerateMax: 'cubic-bezier(1,0,1,1)',
          curveAccelerateMid: 'cubic-bezier(0.7,0,1,0.5)',
          curveAccelerateMin: 'cubic-bezier(0.8,0,1,1)',
          curveDecelerateMax: 'cubic-bezier(0,0,0,1)',
          curveDecelerateMid: 'cubic-bezier(0.1,0.9,0.2,1)',
          curveDecelerateMin: 'cubic-bezier(0.33,0,0.1,1)',
          curveEasyEaseMax: 'cubic-bezier(0.8,0,0.1,1)',
          curveEasyEase: 'cubic-bezier(0.33,0,0.67,1)',
          curveLinear: 'cubic-bezier(0,0,1,1)',
        },
        spacings = {
          none: '0',
          xxs: '2px',
          xs: '4px',
          sNudge: '6px',
          s: '8px',
          mNudge: '10px',
          m: '12px',
          l: '16px',
          xl: '20px',
          xxl: '24px',
          xxxl: '32px',
        },
        horizontalSpacings = {
          spacingHorizontalNone: spacings.none,
          spacingHorizontalXXS: spacings.xxs,
          spacingHorizontalXS: spacings.xs,
          spacingHorizontalSNudge: spacings.sNudge,
          spacingHorizontalS: spacings.s,
          spacingHorizontalMNudge: spacings.mNudge,
          spacingHorizontalM: spacings.m,
          spacingHorizontalL: spacings.l,
          spacingHorizontalXL: spacings.xl,
          spacingHorizontalXXL: spacings.xxl,
          spacingHorizontalXXXL: spacings.xxxl,
        },
        verticalSpacings = {
          spacingVerticalNone: spacings.none,
          spacingVerticalXXS: spacings.xxs,
          spacingVerticalXS: spacings.xs,
          spacingVerticalSNudge: spacings.sNudge,
          spacingVerticalS: spacings.s,
          spacingVerticalMNudge: spacings.mNudge,
          spacingVerticalM: spacings.m,
          spacingVerticalL: spacings.l,
          spacingVerticalXL: spacings.xl,
          spacingVerticalXXL: spacings.xxl,
          spacingVerticalXXXL: spacings.xxxl,
        },
        createLightTheme = brand => {
          let colorTokens = generateColorTokens(brand);
          return {
            ...borderRadius,
            ...fontSizes,
            ...lineHeights,
            ...fontFamilies,
            ...fontWeights,
            ...strokeWidths,
            ...horizontalSpacings,
            ...verticalSpacings,
            ...durations,
            ...curves,
            ...colorTokens,
            ...colorPaletteTokens,
            ...createShadowTokens(colorTokens.colorNeutralShadowAmbient, colorTokens.colorNeutralShadowKey),
            ...createShadowTokens(colorTokens.colorBrandShadowAmbient, colorTokens.colorBrandShadowKey, 'Brand'),
          };
        },
        brandWeb = {
          10: '#061724',
          20: '#082338',
          30: '#0a2e4a',
          40: '#0c3b5e',
          50: '#0e4775',
          60: '#0f548c',
          70: '#115ea3',
          80: '#0f6cbd',
          90: '#2886de',
          100: '#479ef5',
          110: '#62abf5',
          120: '#77b7f7',
          130: '#96c6fa',
          140: '#b4d6fa',
          150: '#cfe4fa',
          160: '#ebf3fc',
        },
        brandTeams = {
          10: '#2b2b40',
          20: '#2f2f4a',
          30: '#333357',
          40: '#383966',
          50: '#3d3e78',
          60: '#444791',
          70: '#4f52b2',
          80: '#5b5fc7',
          90: '#7579eb',
          100: '#7f85f5',
          110: '#9299f7',
          120: '#aab1fa',
          130: '#b6bcfa',
          140: '#c5cbfa',
          150: '#dce0fa',
          160: '#e8ebfa',
        },
        webLightTheme = createLightTheme(brandWeb),
        darkColorPalette_statusColorPaletteTokens = statusSharedColorNames.reduce((acc, sharedColor) => {
          let color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1),
            sharedColorTokens = {
              [`colorPalette${color}Background1`]: statusSharedColors[sharedColor].shade40,
              [`colorPalette${color}Background2`]: statusSharedColors[sharedColor].shade30,
              [`colorPalette${color}Background3`]: statusSharedColors[sharedColor].primary,
              [`colorPalette${color}Foreground1`]: statusSharedColors[sharedColor].tint30,
              [`colorPalette${color}Foreground2`]: statusSharedColors[sharedColor].tint40,
              [`colorPalette${color}Foreground3`]: statusSharedColors[sharedColor].tint20,
              [`colorPalette${color}BorderActive`]: statusSharedColors[sharedColor].tint30,
              [`colorPalette${color}Border1`]: statusSharedColors[sharedColor].primary,
              [`colorPalette${color}Border2`]: statusSharedColors[sharedColor].tint20,
            };
          return Object.assign(acc, sharedColorTokens);
        }, {});
      (darkColorPalette_statusColorPaletteTokens.colorPaletteRedForeground3 = statusSharedColors.red.tint30),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteRedBorder2 = statusSharedColors.red.tint30),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteGreenForeground3 = statusSharedColors.green.tint40),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteGreenBorder2 = statusSharedColors.green.tint40),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteDarkOrangeForeground3 =
          statusSharedColors.darkOrange.tint30),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteDarkOrangeBorder2 =
          statusSharedColors.darkOrange.tint30),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteRedForegroundInverted = statusSharedColors.red.primary),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteGreenForegroundInverted =
          statusSharedColors.green.primary),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteYellowForegroundInverted =
          statusSharedColors.yellow.shade30);
      let darkColorPalette_personaColorPaletteTokens = personaSharedColorNames.reduce((acc, sharedColor) => {
        let color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1),
          sharedColorTokens = {
            [`colorPalette${color}Background2`]: personaSharedColors[sharedColor].shade30,
            [`colorPalette${color}Foreground2`]: personaSharedColors[sharedColor].tint40,
            [`colorPalette${color}BorderActive`]: personaSharedColors[sharedColor].tint30,
          };
        return Object.assign(acc, sharedColorTokens);
      }, {});
      (darkColorPalette_personaColorPaletteTokens.colorPaletteDarkRedBackground2 = personaSharedColors.darkRed.shade20),
        (darkColorPalette_personaColorPaletteTokens.colorPalettePlumBackground2 = personaSharedColors.plum.shade20);
      let darkColorPalette_colorPaletteTokens = {
          ...darkColorPalette_statusColorPaletteTokens,
          ...darkColorPalette_personaColorPaletteTokens,
        },
        darkColor_generateColorTokens = brand => ({
          colorNeutralForeground1: white,
          colorNeutralForeground1Hover: white,
          colorNeutralForeground1Pressed: white,
          colorNeutralForeground1Selected: white,
          colorNeutralForeground2: grey[84],
          colorNeutralForeground2Hover: white,
          colorNeutralForeground2Pressed: white,
          colorNeutralForeground2Selected: white,
          colorNeutralForeground2BrandHover: brand[100],
          colorNeutralForeground2BrandPressed: brand[90],
          colorNeutralForeground2BrandSelected: brand[100],
          colorNeutralForeground3: grey[68],
          colorNeutralForeground3Hover: grey[84],
          colorNeutralForeground3Pressed: grey[84],
          colorNeutralForeground3Selected: grey[84],
          colorNeutralForeground3BrandHover: brand[100],
          colorNeutralForeground3BrandPressed: brand[90],
          colorNeutralForeground3BrandSelected: brand[100],
          colorNeutralForeground4: grey[60],
          colorNeutralForegroundDisabled: grey[36],
          colorNeutralForegroundInvertedDisabled: whiteAlpha[40],
          colorBrandForegroundLink: brand[100],
          colorBrandForegroundLinkHover: brand[110],
          colorBrandForegroundLinkPressed: brand[90],
          colorBrandForegroundLinkSelected: brand[100],
          colorNeutralForeground2Link: grey[84],
          colorNeutralForeground2LinkHover: white,
          colorNeutralForeground2LinkPressed: white,
          colorNeutralForeground2LinkSelected: white,
          colorCompoundBrandForeground1: brand[100],
          colorCompoundBrandForeground1Hover: brand[110],
          colorCompoundBrandForeground1Pressed: brand[90],
          colorBrandForeground1: brand[100],
          colorBrandForeground2: brand[110],
          colorNeutralForeground1Static: grey[14],
          colorNeutralForegroundStaticInverted: white,
          colorNeutralForegroundInverted: grey[14],
          colorNeutralForegroundInvertedHover: grey[14],
          colorNeutralForegroundInvertedPressed: grey[14],
          colorNeutralForegroundInvertedSelected: grey[14],
          colorNeutralForegroundInverted2: grey[14],
          colorNeutralForegroundOnBrand: white,
          colorNeutralForegroundInvertedLink: white,
          colorNeutralForegroundInvertedLinkHover: white,
          colorNeutralForegroundInvertedLinkPressed: white,
          colorNeutralForegroundInvertedLinkSelected: white,
          colorBrandForegroundInverted: brand[80],
          colorBrandForegroundInvertedHover: brand[70],
          colorBrandForegroundInvertedPressed: brand[60],
          colorBrandForegroundOnLight: brand[80],
          colorBrandForegroundOnLightHover: brand[70],
          colorBrandForegroundOnLightPressed: brand[50],
          colorBrandForegroundOnLightSelected: brand[60],
          colorNeutralBackground1: grey[16],
          colorNeutralBackground1Hover: grey[24],
          colorNeutralBackground1Pressed: grey[12],
          colorNeutralBackground1Selected: grey[22],
          colorNeutralBackground2: grey[12],
          colorNeutralBackground2Hover: grey[20],
          colorNeutralBackground2Pressed: grey[8],
          colorNeutralBackground2Selected: grey[18],
          colorNeutralBackground3: grey[8],
          colorNeutralBackground3Hover: grey[16],
          colorNeutralBackground3Pressed: grey[4],
          colorNeutralBackground3Selected: grey[14],
          colorNeutralBackground4: grey[4],
          colorNeutralBackground4Hover: grey[12],
          colorNeutralBackground4Pressed: black,
          colorNeutralBackground4Selected: grey[10],
          colorNeutralBackground5: black,
          colorNeutralBackground5Hover: grey[8],
          colorNeutralBackground5Pressed: grey[2],
          colorNeutralBackground5Selected: grey[6],
          colorNeutralBackground6: grey[20],
          colorNeutralBackgroundInverted: white,
          colorNeutralBackgroundStatic: grey[24],
          colorSubtleBackground: 'transparent',
          colorSubtleBackgroundHover: grey[22],
          colorSubtleBackgroundPressed: grey[18],
          colorSubtleBackgroundSelected: grey[20],
          colorSubtleBackgroundLightAlphaHover: grey14Alpha[80],
          colorSubtleBackgroundLightAlphaPressed: grey14Alpha[50],
          colorSubtleBackgroundLightAlphaSelected: 'transparent',
          colorSubtleBackgroundInverted: 'transparent',
          colorSubtleBackgroundInvertedHover: blackAlpha[10],
          colorSubtleBackgroundInvertedPressed: blackAlpha[30],
          colorSubtleBackgroundInvertedSelected: blackAlpha[20],
          colorTransparentBackground: 'transparent',
          colorTransparentBackgroundHover: 'transparent',
          colorTransparentBackgroundPressed: 'transparent',
          colorTransparentBackgroundSelected: 'transparent',
          colorNeutralBackgroundDisabled: grey[8],
          colorNeutralBackgroundInvertedDisabled: whiteAlpha[10],
          colorNeutralStencil1: grey[34],
          colorNeutralStencil2: grey[20],
          colorNeutralStencil1Alpha: whiteAlpha[10],
          colorNeutralStencil2Alpha: whiteAlpha[5],
          colorBackgroundOverlay: blackAlpha[50],
          colorScrollbarOverlay: whiteAlpha[60],
          colorBrandBackground: brand[70],
          colorBrandBackgroundHover: brand[80],
          colorBrandBackgroundPressed: brand[40],
          colorBrandBackgroundSelected: brand[60],
          colorCompoundBrandBackground: brand[100],
          colorCompoundBrandBackgroundHover: brand[110],
          colorCompoundBrandBackgroundPressed: brand[90],
          colorBrandBackgroundStatic: brand[80],
          colorBrandBackground2: brand[40],
          colorBrandBackgroundInverted: white,
          colorBrandBackgroundInvertedHover: brand[160],
          colorBrandBackgroundInvertedPressed: brand[140],
          colorBrandBackgroundInvertedSelected: brand[150],
          colorNeutralStrokeAccessible: grey[68],
          colorNeutralStrokeAccessibleHover: grey[74],
          colorNeutralStrokeAccessiblePressed: grey[70],
          colorNeutralStrokeAccessibleSelected: brand[100],
          colorNeutralStroke1: grey[40],
          colorNeutralStroke1Hover: grey[46],
          colorNeutralStroke1Pressed: grey[42],
          colorNeutralStroke1Selected: grey[44],
          colorNeutralStroke2: grey[32],
          colorNeutralStroke3: grey[24],
          colorNeutralStrokeOnBrand: grey[16],
          colorNeutralStrokeOnBrand2: white,
          colorNeutralStrokeOnBrand2Hover: white,
          colorNeutralStrokeOnBrand2Pressed: white,
          colorNeutralStrokeOnBrand2Selected: white,
          colorBrandStroke1: brand[100],
          colorBrandStroke2: brand[50],
          colorCompoundBrandStroke: brand[100],
          colorCompoundBrandStrokeHover: brand[110],
          colorCompoundBrandStrokePressed: brand[90],
          colorNeutralStrokeDisabled: grey[26],
          colorNeutralStrokeInvertedDisabled: whiteAlpha[40],
          colorTransparentStroke: 'transparent',
          colorTransparentStrokeInteractive: 'transparent',
          colorTransparentStrokeDisabled: 'transparent',
          colorStrokeFocus1: black,
          colorStrokeFocus2: white,
          colorNeutralShadowAmbient: 'rgba(0,0,0,0.24)',
          colorNeutralShadowKey: 'rgba(0,0,0,0.28)',
          colorNeutralShadowAmbientLighter: 'rgba(0,0,0,0.12)',
          colorNeutralShadowKeyLighter: 'rgba(0,0,0,0.14)',
          colorNeutralShadowAmbientDarker: 'rgba(0,0,0,0.40)',
          colorNeutralShadowKeyDarker: 'rgba(0,0,0,0.48)',
          colorBrandShadowAmbient: 'rgba(0,0,0,0.30)',
          colorBrandShadowKey: 'rgba(0,0,0,0.25)',
        }),
        createDarkTheme = brand => {
          let colorTokens = darkColor_generateColorTokens(brand);
          return {
            ...borderRadius,
            ...fontSizes,
            ...lineHeights,
            ...fontFamilies,
            ...fontWeights,
            ...strokeWidths,
            ...horizontalSpacings,
            ...verticalSpacings,
            ...durations,
            ...curves,
            ...colorTokens,
            ...darkColorPalette_colorPaletteTokens,
            ...createShadowTokens(colorTokens.colorNeutralShadowAmbient, colorTokens.colorNeutralShadowKey),
            ...createShadowTokens(colorTokens.colorBrandShadowAmbient, colorTokens.colorBrandShadowKey, 'Brand'),
          };
        },
        webDarkTheme = createDarkTheme(brandWeb),
        teamsLightTheme = createLightTheme(brandTeams),
        teamsDarkColor_generateColorTokens = brand => ({
          colorNeutralForeground1: white,
          colorNeutralForeground1Hover: white,
          colorNeutralForeground1Pressed: white,
          colorNeutralForeground1Selected: white,
          colorNeutralForeground2: grey[84],
          colorNeutralForeground2Hover: white,
          colorNeutralForeground2Pressed: white,
          colorNeutralForeground2Selected: white,
          colorNeutralForeground2BrandHover: brand[100],
          colorNeutralForeground2BrandPressed: brand[90],
          colorNeutralForeground2BrandSelected: brand[100],
          colorNeutralForeground3: grey[68],
          colorNeutralForeground3Hover: grey[84],
          colorNeutralForeground3Pressed: grey[84],
          colorNeutralForeground3Selected: grey[84],
          colorNeutralForeground3BrandHover: brand[100],
          colorNeutralForeground3BrandPressed: brand[90],
          colorNeutralForeground3BrandSelected: brand[100],
          colorNeutralForeground4: grey[60],
          colorNeutralForegroundDisabled: grey[36],
          colorNeutralForegroundInvertedDisabled: whiteAlpha[40],
          colorBrandForegroundLink: brand[100],
          colorBrandForegroundLinkHover: brand[110],
          colorBrandForegroundLinkPressed: brand[90],
          colorBrandForegroundLinkSelected: brand[100],
          colorNeutralForeground2Link: grey[84],
          colorNeutralForeground2LinkHover: white,
          colorNeutralForeground2LinkPressed: white,
          colorNeutralForeground2LinkSelected: white,
          colorCompoundBrandForeground1: brand[100],
          colorCompoundBrandForeground1Hover: brand[110],
          colorCompoundBrandForeground1Pressed: brand[90],
          colorBrandForeground1: brand[100],
          colorBrandForeground2: brand[120],
          colorNeutralForeground1Static: grey[14],
          colorNeutralForegroundStaticInverted: white,
          colorNeutralForegroundInverted: grey[14],
          colorNeutralForegroundInvertedHover: grey[14],
          colorNeutralForegroundInvertedPressed: grey[14],
          colorNeutralForegroundInvertedSelected: grey[14],
          colorNeutralForegroundInverted2: grey[14],
          colorNeutralForegroundOnBrand: white,
          colorNeutralForegroundInvertedLink: white,
          colorNeutralForegroundInvertedLinkHover: white,
          colorNeutralForegroundInvertedLinkPressed: white,
          colorNeutralForegroundInvertedLinkSelected: white,
          colorBrandForegroundInverted: brand[80],
          colorBrandForegroundInvertedHover: brand[70],
          colorBrandForegroundInvertedPressed: brand[60],
          colorBrandForegroundOnLight: brand[80],
          colorBrandForegroundOnLightHover: brand[70],
          colorBrandForegroundOnLightPressed: brand[50],
          colorBrandForegroundOnLightSelected: brand[60],
          colorNeutralBackground1: grey[16],
          colorNeutralBackground1Hover: grey[24],
          colorNeutralBackground1Pressed: grey[12],
          colorNeutralBackground1Selected: grey[22],
          colorNeutralBackground2: grey[14],
          colorNeutralBackground2Hover: grey[22],
          colorNeutralBackground2Pressed: grey[10],
          colorNeutralBackground2Selected: grey[20],
          colorNeutralBackground3: grey[12],
          colorNeutralBackground3Hover: grey[20],
          colorNeutralBackground3Pressed: grey[8],
          colorNeutralBackground3Selected: grey[18],
          colorNeutralBackground4: grey[8],
          colorNeutralBackground4Hover: grey[16],
          colorNeutralBackground4Pressed: grey[4],
          colorNeutralBackground4Selected: grey[14],
          colorNeutralBackground5: grey[4],
          colorNeutralBackground5Hover: grey[12],
          colorNeutralBackground5Pressed: black,
          colorNeutralBackground5Selected: grey[10],
          colorNeutralBackground6: grey[20],
          colorNeutralBackgroundInverted: white,
          colorNeutralBackgroundStatic: grey[24],
          colorSubtleBackground: 'transparent',
          colorSubtleBackgroundHover: grey[22],
          colorSubtleBackgroundPressed: grey[18],
          colorSubtleBackgroundSelected: grey[20],
          colorSubtleBackgroundLightAlphaHover: grey14Alpha[80],
          colorSubtleBackgroundLightAlphaPressed: grey14Alpha[50],
          colorSubtleBackgroundLightAlphaSelected: 'transparent',
          colorSubtleBackgroundInverted: 'transparent',
          colorSubtleBackgroundInvertedHover: blackAlpha[10],
          colorSubtleBackgroundInvertedPressed: blackAlpha[30],
          colorSubtleBackgroundInvertedSelected: blackAlpha[20],
          colorTransparentBackground: 'transparent',
          colorTransparentBackgroundHover: 'transparent',
          colorTransparentBackgroundPressed: 'transparent',
          colorTransparentBackgroundSelected: 'transparent',
          colorNeutralBackgroundDisabled: grey[8],
          colorNeutralBackgroundInvertedDisabled: whiteAlpha[10],
          colorNeutralStencil1: grey[34],
          colorNeutralStencil2: grey[20],
          colorNeutralStencil1Alpha: whiteAlpha[10],
          colorNeutralStencil2Alpha: whiteAlpha[5],
          colorBackgroundOverlay: blackAlpha[50],
          colorScrollbarOverlay: whiteAlpha[60],
          colorBrandBackground: brand[70],
          colorBrandBackgroundHover: brand[80],
          colorBrandBackgroundPressed: brand[40],
          colorBrandBackgroundSelected: brand[60],
          colorCompoundBrandBackground: brand[100],
          colorCompoundBrandBackgroundHover: brand[110],
          colorCompoundBrandBackgroundPressed: brand[90],
          colorBrandBackgroundStatic: brand[80],
          colorBrandBackground2: brand[40],
          colorBrandBackgroundInverted: white,
          colorBrandBackgroundInvertedHover: brand[160],
          colorBrandBackgroundInvertedPressed: brand[140],
          colorBrandBackgroundInvertedSelected: brand[150],
          colorNeutralStrokeAccessible: grey[68],
          colorNeutralStrokeAccessibleHover: grey[74],
          colorNeutralStrokeAccessiblePressed: grey[70],
          colorNeutralStrokeAccessibleSelected: brand[100],
          colorNeutralStroke1: grey[40],
          colorNeutralStroke1Hover: grey[46],
          colorNeutralStroke1Pressed: grey[42],
          colorNeutralStroke1Selected: grey[44],
          colorNeutralStroke2: grey[32],
          colorNeutralStroke3: grey[24],
          colorNeutralStrokeOnBrand: grey[16],
          colorNeutralStrokeOnBrand2: white,
          colorNeutralStrokeOnBrand2Hover: white,
          colorNeutralStrokeOnBrand2Pressed: white,
          colorNeutralStrokeOnBrand2Selected: white,
          colorBrandStroke1: brand[100],
          colorBrandStroke2: brand[50],
          colorCompoundBrandStroke: brand[90],
          colorCompoundBrandStrokeHover: brand[100],
          colorCompoundBrandStrokePressed: brand[80],
          colorNeutralStrokeDisabled: grey[26],
          colorNeutralStrokeInvertedDisabled: whiteAlpha[40],
          colorTransparentStroke: 'transparent',
          colorTransparentStrokeInteractive: 'transparent',
          colorTransparentStrokeDisabled: 'transparent',
          colorStrokeFocus1: black,
          colorStrokeFocus2: white,
          colorNeutralShadowAmbient: 'rgba(0,0,0,0.24)',
          colorNeutralShadowKey: 'rgba(0,0,0,0.28)',
          colorNeutralShadowAmbientLighter: 'rgba(0,0,0,0.12)',
          colorNeutralShadowKeyLighter: 'rgba(0,0,0,0.14)',
          colorNeutralShadowAmbientDarker: 'rgba(0,0,0,0.40)',
          colorNeutralShadowKeyDarker: 'rgba(0,0,0,0.48)',
          colorBrandShadowAmbient: 'rgba(0,0,0,0.30)',
          colorBrandShadowKey: 'rgba(0,0,0,0.25)',
        }),
        createTeamsDarkTheme = brand => {
          let colorTokens = teamsDarkColor_generateColorTokens(brand);
          return {
            ...borderRadius,
            ...fontSizes,
            ...lineHeights,
            ...fontFamilies,
            ...fontWeights,
            ...strokeWidths,
            ...horizontalSpacings,
            ...verticalSpacings,
            ...durations,
            ...curves,
            ...colorTokens,
            ...darkColorPalette_colorPaletteTokens,
            ...createShadowTokens(colorTokens.colorNeutralShadowAmbient, colorTokens.colorNeutralShadowKey),
            ...createShadowTokens(colorTokens.colorBrandShadowAmbient, colorTokens.colorBrandShadowKey, 'Brand'),
          };
        },
        teamsDarkTheme = createTeamsDarkTheme(brandTeams),
        highContrastColorPalette_statusColorPaletteTokens = statusSharedColorNames.reduce((acc, sharedColor) => {
          let color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1),
            sharedColorTokens = {
              [`colorPalette${color}Background1`]: hcCanvas,
              [`colorPalette${color}Background2`]: hcCanvas,
              [`colorPalette${color}Background3`]: hcCanvasText,
              [`colorPalette${color}Foreground1`]: hcCanvasText,
              [`colorPalette${color}Foreground2`]: hcCanvasText,
              [`colorPalette${color}Foreground3`]: hcCanvasText,
              [`colorPalette${color}BorderActive`]: hcHighlight,
              [`colorPalette${color}Border1`]: hcCanvasText,
              [`colorPalette${color}Border2`]: hcCanvasText,
            };
          return Object.assign(acc, sharedColorTokens);
        }, {});
      (highContrastColorPalette_statusColorPaletteTokens.colorPaletteRedForegroundInverted = hcCanvasText),
        (highContrastColorPalette_statusColorPaletteTokens.colorPaletteGreenForegroundInverted = hcCanvasText),
        (highContrastColorPalette_statusColorPaletteTokens.colorPaletteYellowForegroundInverted = hcCanvasText);
      let highContrastColorPalette_personaColorPaletteTokens = personaSharedColorNames.reduce((acc, sharedColor) => {
          let color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1),
            sharedColorTokens = {
              [`colorPalette${color}Background2`]: hcCanvas,
              [`colorPalette${color}Foreground2`]: hcCanvasText,
              [`colorPalette${color}BorderActive`]: hcHighlight,
            };
          return Object.assign(acc, sharedColorTokens);
        }, {}),
        highContrastColorPalette_colorPaletteTokens = {
          ...highContrastColorPalette_statusColorPaletteTokens,
          ...highContrastColorPalette_personaColorPaletteTokens,
        },
        highContrastColor_generateColorTokens = () => ({
          colorNeutralForeground1: hcCanvasText,
          colorNeutralForeground1Hover: hcHighlightText,
          colorNeutralForeground1Pressed: hcHighlightText,
          colorNeutralForeground1Selected: hcHighlightText,
          colorNeutralForeground2: hcCanvasText,
          colorNeutralForeground2Hover: hcHighlightText,
          colorNeutralForeground2Pressed: hcHighlightText,
          colorNeutralForeground2Selected: hcHighlightText,
          colorNeutralForeground2BrandHover: hcHighlightText,
          colorNeutralForeground2BrandPressed: hcHighlightText,
          colorNeutralForeground2BrandSelected: hcHighlightText,
          colorNeutralForeground3: hcCanvasText,
          colorNeutralForeground3Hover: hcHighlightText,
          colorNeutralForeground3Pressed: hcHighlightText,
          colorNeutralForeground3Selected: hcHighlightText,
          colorNeutralForeground3BrandHover: hcHighlightText,
          colorNeutralForeground3BrandPressed: hcHighlightText,
          colorNeutralForeground3BrandSelected: hcHighlightText,
          colorNeutralForeground4: hcCanvasText,
          colorNeutralForegroundDisabled: hcDisabled,
          colorNeutralForegroundInvertedDisabled: hcDisabled,
          colorBrandForegroundLink: hcHyperlink,
          colorBrandForegroundLinkHover: hcHyperlink,
          colorBrandForegroundLinkPressed: hcHyperlink,
          colorBrandForegroundLinkSelected: hcHyperlink,
          colorNeutralForeground2Link: hcHyperlink,
          colorNeutralForeground2LinkHover: hcHyperlink,
          colorNeutralForeground2LinkPressed: hcHyperlink,
          colorNeutralForeground2LinkSelected: hcHyperlink,
          colorCompoundBrandForeground1: hcHighlight,
          colorCompoundBrandForeground1Hover: hcHighlight,
          colorCompoundBrandForeground1Pressed: hcHighlight,
          colorBrandForeground1: hcCanvasText,
          colorBrandForeground2: hcButtonText,
          colorNeutralForeground1Static: hcCanvas,
          colorNeutralForegroundStaticInverted: hcCanvasText,
          colorNeutralForegroundInverted: hcHighlightText,
          colorNeutralForegroundInvertedHover: hcHighlightText,
          colorNeutralForegroundInvertedPressed: hcHighlightText,
          colorNeutralForegroundInvertedSelected: hcHighlightText,
          colorNeutralForegroundInverted2: hcCanvasText,
          colorNeutralForegroundOnBrand: hcButtonText,
          colorNeutralForegroundInvertedLink: hcHyperlink,
          colorNeutralForegroundInvertedLinkHover: hcHyperlink,
          colorNeutralForegroundInvertedLinkPressed: hcHyperlink,
          colorNeutralForegroundInvertedLinkSelected: hcHyperlink,
          colorBrandForegroundInverted: hcCanvasText,
          colorBrandForegroundInvertedHover: hcHighlightText,
          colorBrandForegroundInvertedPressed: hcHighlightText,
          colorBrandForegroundOnLight: hcButtonText,
          colorBrandForegroundOnLightHover: hcHighlightText,
          colorBrandForegroundOnLightPressed: hcHighlightText,
          colorBrandForegroundOnLightSelected: hcHighlightText,
          colorNeutralBackground1: hcCanvas,
          colorNeutralBackground1Hover: hcHighlight,
          colorNeutralBackground1Pressed: hcHighlight,
          colorNeutralBackground1Selected: hcHighlight,
          colorNeutralBackground2: hcCanvas,
          colorNeutralBackground2Hover: hcHighlight,
          colorNeutralBackground2Pressed: hcHighlight,
          colorNeutralBackground2Selected: hcHighlight,
          colorNeutralBackground3: hcCanvas,
          colorNeutralBackground3Hover: hcHighlight,
          colorNeutralBackground3Pressed: hcHighlight,
          colorNeutralBackground3Selected: hcHighlight,
          colorNeutralBackground4: hcCanvas,
          colorNeutralBackground4Hover: hcHighlight,
          colorNeutralBackground4Pressed: hcHighlight,
          colorNeutralBackground4Selected: hcHighlight,
          colorNeutralBackground5: hcCanvas,
          colorNeutralBackground5Hover: hcHighlight,
          colorNeutralBackground5Pressed: hcHighlight,
          colorNeutralBackground5Selected: hcHighlight,
          colorNeutralBackground6: hcCanvas,
          colorNeutralBackgroundInverted: hcCanvas,
          colorNeutralBackgroundStatic: hcCanvas,
          colorSubtleBackground: 'transparent',
          colorSubtleBackgroundHover: hcHighlight,
          colorSubtleBackgroundPressed: hcHighlight,
          colorSubtleBackgroundSelected: hcHighlight,
          colorSubtleBackgroundLightAlphaHover: hcHighlight,
          colorSubtleBackgroundLightAlphaPressed: hcHighlight,
          colorSubtleBackgroundLightAlphaSelected: hcHighlight,
          colorSubtleBackgroundInverted: 'transparent',
          colorSubtleBackgroundInvertedHover: hcHighlight,
          colorSubtleBackgroundInvertedPressed: hcHighlight,
          colorSubtleBackgroundInvertedSelected: hcHighlight,
          colorTransparentBackground: 'transparent',
          colorTransparentBackgroundHover: hcHighlight,
          colorTransparentBackgroundPressed: hcHighlight,
          colorTransparentBackgroundSelected: hcHighlight,
          colorNeutralBackgroundDisabled: hcCanvas,
          colorNeutralBackgroundInvertedDisabled: hcCanvas,
          colorNeutralStencil1: hcCanvasText,
          colorNeutralStencil2: hcCanvasText,
          colorNeutralStencil1Alpha: hcCanvasText,
          colorNeutralStencil2Alpha: hcCanvasText,
          colorBackgroundOverlay: blackAlpha[50],
          colorScrollbarOverlay: hcButtonFace,
          colorBrandBackground: hcButtonFace,
          colorBrandBackgroundHover: hcHighlight,
          colorBrandBackgroundPressed: hcHighlight,
          colorBrandBackgroundSelected: hcHighlight,
          colorCompoundBrandBackground: hcHighlight,
          colorCompoundBrandBackgroundHover: hcHighlight,
          colorCompoundBrandBackgroundPressed: hcHighlight,
          colorBrandBackgroundStatic: hcCanvas,
          colorBrandBackground2: hcButtonFace,
          colorBrandBackgroundInverted: hcButtonFace,
          colorBrandBackgroundInvertedHover: hcHighlight,
          colorBrandBackgroundInvertedPressed: hcHighlight,
          colorBrandBackgroundInvertedSelected: hcHighlight,
          colorNeutralStrokeAccessible: hcCanvasText,
          colorNeutralStrokeAccessibleHover: hcHighlight,
          colorNeutralStrokeAccessiblePressed: hcHighlight,
          colorNeutralStrokeAccessibleSelected: hcHighlight,
          colorNeutralStroke1: hcCanvasText,
          colorNeutralStroke1Hover: hcHighlight,
          colorNeutralStroke1Pressed: hcHighlight,
          colorNeutralStroke1Selected: hcHighlight,
          colorNeutralStroke2: hcCanvasText,
          colorNeutralStroke3: hcCanvasText,
          colorNeutralStrokeOnBrand: hcCanvas,
          colorNeutralStrokeOnBrand2: hcCanvasText,
          colorNeutralStrokeOnBrand2Hover: hcCanvasText,
          colorNeutralStrokeOnBrand2Pressed: hcCanvasText,
          colorNeutralStrokeOnBrand2Selected: hcCanvasText,
          colorBrandStroke1: hcCanvasText,
          colorBrandStroke2: hcCanvasText,
          colorCompoundBrandStroke: hcHighlight,
          colorCompoundBrandStrokeHover: hcHighlight,
          colorCompoundBrandStrokePressed: hcHighlight,
          colorNeutralStrokeDisabled: hcDisabled,
          colorNeutralStrokeInvertedDisabled: hcDisabled,
          colorTransparentStroke: hcCanvasText,
          colorTransparentStrokeInteractive: hcHighlight,
          colorTransparentStrokeDisabled: hcDisabled,
          colorStrokeFocus1: hcCanvas,
          colorStrokeFocus2: hcHighlight,
          colorNeutralShadowAmbient: 'rgba(0,0,0,0.24)',
          colorNeutralShadowKey: 'rgba(0,0,0,0.28)',
          colorNeutralShadowAmbientLighter: 'rgba(0,0,0,0.12)',
          colorNeutralShadowKeyLighter: 'rgba(0,0,0,0.14)',
          colorNeutralShadowAmbientDarker: 'rgba(0,0,0,0.40)',
          colorNeutralShadowKeyDarker: 'rgba(0,0,0,0.48)',
          colorBrandShadowAmbient: 'rgba(0,0,0,0.30)',
          colorBrandShadowKey: 'rgba(0,0,0,0.25)',
        }),
        createHighContrastTheme = () => {
          let colorTokens = highContrastColor_generateColorTokens();
          return {
            ...borderRadius,
            ...fontSizes,
            ...lineHeights,
            ...fontFamilies,
            ...fontWeights,
            ...strokeWidths,
            ...horizontalSpacings,
            ...verticalSpacings,
            ...durations,
            ...curves,
            ...colorTokens,
            ...highContrastColorPalette_colorPaletteTokens,
            ...createShadowTokens(colorTokens.colorNeutralShadowAmbient, colorTokens.colorNeutralShadowKey),
            ...createShadowTokens(colorTokens.colorBrandShadowAmbient, colorTokens.colorBrandShadowKey, 'Brand'),
          };
        },
        teamsHighContrastTheme = createHighContrastTheme(),
        themes = [
          { id: 'web-light', label: 'Web Light', theme: webLightTheme },
          { id: 'web-dark', label: 'Web Dark', theme: webDarkTheme },
          { id: 'teams-light', label: 'Teams Light', theme: teamsLightTheme },
          { id: 'teams-dark', label: 'Teams Dark', theme: teamsDarkTheme },
          { id: 'teams-high-contrast', label: 'Teams High Contrast', theme: teamsHighContrastTheme },
        ],
        defaultTheme = themes[0];
      function useGlobals() {
        return (0, dist_esm.useGlobals)();
      }
      function createThemeItems(value, changeTheme, getCurrentTheme) {
        return value.map(item => ({
          id: item.id,
          title: item.id === defaultTheme.id ? `${item.label} (Default)` : item.label,
          onClick: () => {
            changeTheme(item.id);
          },
          value: item.id,
          active: getCurrentTheme() === item.id,
        }));
      }
      let ThemePicker = () => {
          var _a;
          let [globals, updateGlobals] = useGlobals(),
            fluentTheme = (0, dist_esm.useParameter)('fluentTheme'),
            selectedThemeId =
              fluentTheme || (null !== (_a = globals[THEME_ID]) && void 0 !== _a ? _a : defaultTheme.id),
            selectedTheme = themes.find(entry => entry.id === selectedThemeId),
            isActive = selectedThemeId !== defaultTheme.id,
            setTheme = react.useCallback(
              id => {
                updateGlobals({ [THEME_ID]: id });
              },
              [updateGlobals],
            ),
            renderTooltip = react.useCallback(
              props =>
                react.createElement(index_681e4b07.ac, {
                  links: createThemeItems(
                    themes,
                    id => {
                      setTheme(id), props.onHide();
                    },
                    () => selectedThemeId,
                  ),
                }),
              [selectedThemeId, setTheme],
            );
          return react.createElement(
            react.Fragment,
            null,
            react.createElement(
              index_681e4b07.W,
              { placement: 'top', trigger: 'click', closeOnClick: !0, tooltip: renderTooltip },
              react.createElement(
                index_681e4b07.ah,
                { key: THEME_ID, title: 'Change Fluent theme', active: isActive },
                react.createElement(index_681e4b07.I, { icon: 'chevrondown' }),
                react.createElement(
                  'span',
                  { style: { marginLeft: 5 } },
                  'Theme: ',
                  null == selectedTheme ? void 0 : selectedTheme.label,
                ),
              ),
            ),
          );
        },
        ReactStrictMode = () => {
          var _a;
          let [globals, updateGlobals] = useGlobals(),
            isActive = null !== (_a = globals[STRICT_MODE_ID]) && void 0 !== _a && _a,
            toggleStrictMode = react.useCallback(() => updateGlobals({ [STRICT_MODE_ID]: !isActive }), [
              isActive,
              updateGlobals,
            ]);
          return react.createElement(
            index_681e4b07.ah,
            { key: STRICT_MODE_ID, active: isActive, title: 'Toggle React Strict mode', onClick: toggleStrictMode },
            react.createElement(index_681e4b07.I, { icon: 'lock' }),
          );
        };
      esm.KP.register(ADDON_ID, () => {
        esm.KP.add(THEME_ID, {
          title: 'Fluent Theme Picker',
          type: types.V.TOOL,
          match: ({ viewMode }) => !!(viewMode && viewMode.match(/^(story|docs)$/)),
          render: ThemePicker,
        }),
          esm.KP.add(STRICT_MODE_ID, {
            type: types.V.TOOL,
            title: 'React Strict Mode',
            match: ({ viewMode }) => !!(viewMode && viewMode.match(/^(story|docs)$/)),
            render: ReactStrictMode,
          });
      });
    },
    24654: () => {},
  },
  __webpack_require__ => {
    var __webpack_exec__ = moduleId => __webpack_require__((__webpack_require__.s = moduleId));
    __webpack_require__.O(
      0,
      [289],
      () => (
        __webpack_exec__(37707),
        __webpack_exec__(7967),
        __webpack_exec__(15887),
        __webpack_exec__(59288),
        __webpack_exec__(76710),
        __webpack_exec__(50213),
        __webpack_exec__(75259),
        __webpack_exec__(57464),
        __webpack_exec__(10165),
        __webpack_exec__(13457),
        __webpack_exec__(1498),
        __webpack_exec__(78295),
        __webpack_exec__(52852),
        __webpack_exec__(88056),
        __webpack_exec__(24774),
        __webpack_exec__(70967)
      ),
    );
    var __webpack_exports__ = __webpack_require__.O();
  },
]);
