(self.webpackChunk_fluentui_fluentui_repo = self.webpackChunk_fluentui_fluentui_repo || []).push([
  [179],
  {
    './node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./.storybook/docs-root.css': (
      module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      'use strict';
      __webpack_require__.d(__webpack_exports__, { Z: () => __WEBPACK_DEFAULT_EXPORT__ });
      var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          './node_modules/css-loader/dist/runtime/api.js',
        ),
        ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
          _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__,
        )()(function (i) {
          return i[1];
        });
      ___CSS_LOADER_EXPORT___.push([
        module.id,
        "#docs-root .sbdocs-content {\r\n  font-family: 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue',\r\n    sans-serif;\r\n  max-width: 1200px;\r\n}\r\n\r\n#docs-root h1.sbdocs-title {\r\n  font-size: 44px;\r\n  line-height: 60px;\r\n  /* identical to box height, or 143% */\r\n  letter-spacing: -0.04em;\r\n  color: #000000;\r\n  margin-top: 49px;\r\n}\r\n\r\n#docs-root details {\r\n  position: relative;\r\n  z-index: 99;\r\n}\r\n\r\n#docs-root .sbdocs-p {\r\n  font-family: 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue',\r\n    sans-serif;\r\n  font-size: 18px;\r\n  line-height: 27px;\r\n  letter-spacing: -0.01em;\r\n  color: #000000;\r\n  margin-top: 24px;\r\n}\r\n\r\n#docs-root .sbdocs-wrapper {\r\n  background: white;\r\n  min-height: auto;\r\n}\r\n\r\n#docs-root .sbdocs-img.featured-image {\r\n  max-width: 100%;\r\n  margin: 48px 0;\r\n  display: block;\r\n}\r\n\r\n#docs-root .sbdocs-img {\r\n  border-radius: 24px;\r\n}\r\n\r\n#docs-root .sbdocs-hr {\r\n  margin: 48px 0;\r\n  height: 0;\r\n  border-top: 1px solid #ebebeb;\r\n}\r\n\r\n#docs-root .sbdocs-h2 {\r\n  font-family: 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue',\r\n    sans-serif;\r\n  font-size: 24px;\r\n  line-height: 28px;\r\n  letter-spacing: -0.04em;\r\n  color: black;\r\n  border-top: 1px solid #ebebeb;\r\n  border-bottom: none;\r\n  margin: 48px 0 15px 0;\r\n  padding: 48px 0 0 0;\r\n}\r\n\r\n#docs-root .sbdocs-h2 code {\r\n  border-radius: 4px;\r\n  font-size: 20px;\r\n}\r\n\r\n#docs-root .sbdocs-h3 {\r\n  font-family: 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue',\r\n    sans-serif;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  margin: 25px 0 0 0 !important;\r\n  letter-spacing: -0.01em;\r\n  color: #000000;\r\n}\r\n\r\n#docs-root .sbdocs-h3 code {\r\n  border-radius: 3px;\r\n  font-size: 16px;\r\n}\r\n\r\n/* Only apply to H3s inside of stories which have a parent with an ID */\r\n#docs-root [id] > .sbdocs-h3:before {\r\n  content: '';\r\n  display: block;\r\n  height: 40px;\r\n  margin: -40px 0 0;\r\n}\r\n\r\n#docs-root .sbdocs-li {\r\n  font-family: 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue',\r\n    sans-serif;\r\n  font-size: 16px;\r\n  line-height: 150%;\r\n  letter-spacing: -0.01em;\r\n\r\n  /* Neutrals / Web / Gray 200 #1B1A19 */\r\n  color: #1b1a19;\r\n  margin-top: 8px;\r\n}\r\n\r\n#docs-root .sbdocs-ul {\r\n  margin: 12px 0;\r\n}\r\n\r\n#docs-root .sbdocs-ul .sbdocs-li {\r\n  list-style: none;\r\n  position: relative;\r\n}\r\n\r\n#docs-root .sbdocs-ul .sbdocs-li::before {\r\n  position: absolute;\r\n  content: 'â€¢';\r\n  color: #8d8d8d;\r\n  top: 0;\r\n  left: -15px;\r\n}\r\n\r\n#docs-root .sbdocs-ol .sbdocs-li::marker {\r\n  color: #8d8d8d;\r\n}\r\n\r\n#docs-root .sbdocs-preview {\r\n  border-radius: 16px;\r\n  background: var(--colorBrandBackgroundInverted, #fff);\r\n  padding: 0;\r\n  box-shadow: none;\r\n  border: 1px solid var(--colorNeutralStroke1, #e1dfdd);\r\n}\r\n\r\n#docs-root .innerZoomElementWrapper {\r\n  padding: 30px;\r\n}\r\n\r\n#docs-root .sbdocs-preview > .os-host {\r\n  display: none;\r\n}\r\n\r\n/* Remove z-index from \"show code\" button container */\r\n/* https://github.com/microsoft/fluentui/issues/22773 */\r\n.docs-story > div:nth-child(2) {\r\n  z-index: auto;\r\n}\r\n\r\n#docs-root .docblock-code-toggle,\r\n.docs-story .with-code-sandbox-button {\r\n  font-family: 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue',\r\n    sans-serif;\r\n  min-width: 91px;\r\n  font-size: 14px !important;\r\n  font-weight: 600 !important;\r\n  margin-right: 32px !important;\r\n  line-height: 150% !important;\r\n  color: #201f1e !important;\r\n  text-align: center !important;\r\n  justify-content: center !important;\r\n  letter-spacing: -0.01em !important;\r\n  background: #f8f8f8 !important;\r\n  border: none !important;\r\n  /* box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.25) !important; */\r\n  border-radius: 5px 5px 0px 0px !important;\r\n}\r\n\r\n/* Reduce font size of CodeSandbox and Show Code button when zoomed or small window width*/\r\n/* https://github.com/microsoft/fluentui/issues/22764 */\r\n\r\n@media screen and (max-width: 380px) {\r\n  #docs-root .docblock-code-toggle,\r\n  .docs-story .with-code-sandbox-button {\r\n    font-size: 10px !important;\r\n  }\r\n}\r\n\r\n/* Make storybook-addon-export-to-codesandbox button match Figma design */\r\n.docs-story .with-code-sandbox-button {\r\n  right: 105px !important;\r\n}\r\n\r\n.docs-story .with-code-sandbox-button:focus {\r\n  outline: none;\r\n  box-shadow: #1ea7fd 0 -3px 0 0 inset;\r\n}\r\n\r\n#docs-root span + .sbdocs .docblock-argstable tbody tr td button {\r\n  color: #0078d4;\r\n  color: red;\r\n}\r\n\r\n#docs-root .docs-story + div {\r\n  background: #11100f;\r\n}\r\n\r\n#docs-root .sbdocs-content > div:last-child {\r\n  margin-bottom: 96px;\r\n}\r\n\r\n#docs-root .docs-story > div {\r\n  padding: 0;\r\n  background: none;\r\n}\r\n\r\n#docs-root .docs-story > div:last-child {\r\n  right: 31px;\r\n  border-radius: 24px;\r\n}\r\n\r\n.docs-story + div > div:last-child {\r\n  background: #000000;\r\n  box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.25);\r\n  border-radius: 5px 5px 0px 0px;\r\n  right: 31px;\r\n}\r\n\r\n.docs-story + div > div:last-child > button {\r\n  color: white;\r\n  font-family: 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue',\r\n    sans-serif;\r\n  font-size: 14px;\r\n  line-height: 150%;\r\n  text-align: center;\r\n  letter-spacing: -0.01em;\r\n}\r\n\r\n#docs-root a.sbdocs-a {\r\n  color: #0078d4;\r\n}\r\n\r\n/*  */\r\n/* Args Table */\r\n/*  */\r\n\r\n#docs-root .docblock-argstable tbody {\r\n  box-shadow: none;\r\n  border-left: none;\r\n  border-right: none;\r\n}\r\n\r\n#docs-root .docblock-argstable-head th {\r\n  letter-spacing: -0.01em;\r\n  color: black;\r\n  font-family: 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue',\r\n    sans-serif;\r\n  font-size: 16px;\r\n  line-height: 150%;\r\n  font-weight: 600;\r\n}\r\n\r\n#docs-root thead.docblock-argstable-head {\r\n  border-bottom: 1px solid #edebe9;\r\n}\r\n\r\n#docs-root .docblock-argstable-body > tr > td:nth-child(4) {\r\n  display: none;\r\n}\r\n\r\n#docs-root .docblock-argstable-head > tr > th:nth-child(4) {\r\n  display: none;\r\n}\r\n\r\n#docs-root .docblock-argstable tbody tr {\r\n  border: none;\r\n}\r\n\r\n#docs-root table.docblock-argstable tbody.docblock-argstable-body td,\r\n#docs-root .docblock-argstable th {\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n  padding-left: 16px;\r\n}\r\n\r\n#docs-root .docblock-argstable tbody tr td:nth-child(1) span {\r\n  font-weight: normal;\r\n  font-family: 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue',\r\n    sans-serif;\r\n  font-size: 16px;\r\n  line-height: 130%;\r\n  letter-spacing: -0.01em;\r\n  color: #616161;\r\n}\r\n\r\n#docs-root .docblock-argstable tbody tr td {\r\n  vertical-align: top;\r\n}\r\n\r\n#docs-root .docblock-argstable-body > tr > td > div > div > button {\r\n  color: #0078d4;\r\n  line-height: 21px;\r\n}\r\n\r\n#docs-root code,\r\n#docs-root .docblock-argstable tbody tr td:nth-child(3) > div > span,\r\n#docs-root .docblock-argstable-body > tr > td:nth-child(2) > div:nth-child(2) span,\r\n#docs-root .docblock-argstable-body > tr > td:nth-child(2) > div:nth-child(1) > div > span,\r\n#docs-root .css-16d4d7t {\r\n  font-family: 'Cascadia Code', Menlo, 'Courier New', Courier, monospace;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 14px;\r\n  line-height: 130%;\r\n  letter-spacing: -0.2px;\r\n  box-decoration-break: clone;\r\n  -webkit-box-decoration-break: clone;\r\n}\r\n\r\n#docs-root code.sbdocs-code,\r\n#docs-root .sbdocs-p code,\r\n#docs-root .sbdocs-li code,\r\n#docs-root .docblock-argstable code,\r\n#docs-root .docblock-argstable tbody tr td:nth-child(3) > div > span,\r\n#docs-root .docblock-argstable-body > tr > td:nth-child(2) > div:nth-child(2) span,\r\n#docs-root .docblock-argstable-body > tr > td:nth-child(2) > div:nth-child(1) > div > span,\r\n#docs-root .css-16d4d7t {\r\n  font-size: 14px;\r\n  background: #f0f0f0;\r\n  border-radius: 4px;\r\n  padding: 1px 4px;\r\n  margin: 0 3px 0 3px;\r\n  color: black;\r\n  border: none;\r\n  line-height: 1.5;\r\n}\r\n\r\n#docs-root .docblock-argstable code {\r\n  white-space: normal;\r\n}\r\n\r\n#docs-root code {\r\n  padding: 0.1em 0.2em;\r\n  display: inline-block;\r\n  background-color: rgba(17, 16, 15, 0.1);\r\n  border-radius: 2px;\r\n}\r\n\r\n.os-content-glue {\r\n  width: auto !important;\r\n}\r\n\r\n#docs-root .sbdocs-preview .prismjs {\r\n  overflow: hidden;\r\n}\r\n\r\n#docs-root .os-content .prismjs * {\r\n  font-family: 'Cascadia Code', Menlo, 'Courier New', Courier, monospace;\r\n  font-size: 14px;\r\n  line-height: 1.4em;\r\n}\r\n\r\n#docs-root .sbdocs-preview .prismjs code {\r\n  color: white;\r\n  background: #11100f;\r\n  margin: 0;\r\n  overflow-x: auto;\r\n}\r\n\r\n#docs-root .docblock-argstable-body td > div > p,\r\n#docs-root .docblock-argstable-body > tr > td:nth-child(2) p,\r\n#docs-root .docblock-argstable-body > tr > td:nth-child(2) > div:nth-child(1) > span {\r\n  font-family: 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue',\r\n    sans-serif;\r\n  font-size: 16px;\r\n  line-height: 130%;\r\n  color: black;\r\n  letter-spacing: -0.01em;\r\n}\r\n\r\n#docs-root .docblock-argstable tr > :nth-child(1) {\r\n  width: 4%;\r\n}\r\n\r\n#docs-root .docblock-argstable tr > :nth-child(2) {\r\n  width: 100%;\r\n}\r\n\r\n#docs-root .os-padding {\r\n  z-index: 0;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Segoe UI';\r\n  src: local('Segoe UI Light'),\r\n    url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/light/latest.woff2) format('woff2'),\r\n    url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/light/latest.woff) format('woff'),\r\n    url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/light/latest.ttf) format('truetype');\r\n  font-weight: 100;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Segoe UI';\r\n  src: local('Segoe UI Semilight'),\r\n    url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semilight/latest.woff2) format('woff2'),\r\n    url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semilight/latest.woff) format('woff'),\r\n    url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semilight/latest.ttf) format('truetype');\r\n  font-weight: 200;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Segoe UI';\r\n  src: local('Segoe UI'),\r\n    url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/normal/latest.woff2) format('woff2'),\r\n    url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/normal/latest.woff) format('woff'),\r\n    url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/normal/latest.ttf) format('truetype');\r\n  font-weight: 400;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Segoe UI';\r\n  src: local('Segoe UI Semibold'),\r\n    url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semibold/latest.woff2) format('woff2'),\r\n    url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semibold/latest.woff) format('woff'),\r\n    url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semibold/latest.ttf) format('truetype');\r\n  font-weight: 600;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Segoe UI';\r\n  src: local('Segoe UI Bold'),\r\n    url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/bold/latest.woff2) format('woff2'),\r\n    url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/bold/latest.woff) format('woff'),\r\n    url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/bold/latest.ttf) format('truetype');\r\n  font-weight: 700;\r\n}\r\n\r\nbody,\r\nbody p,\r\nbody ul,\r\nbody ul li {\r\n  font-family: 'Segoe UI' !important;\r\n}\r\n\r\nh1.fluent {\r\n  font-weight: 700;\r\n  font-size: 40px;\r\n  font-family: 'Segoe UI';\r\n  line-height: 60px;\r\n  letter-spacing: -0.16px;\r\n}\r\n\r\nh1 .fluent-version {\r\n  display: block;\r\n  font-size: 24px; /* --font-size-base-600 */\r\n  line-height: 32px;\r\n  color: #707070; /* --color-neutral-foreground-3 */\r\n}\r\n\r\nh2.fluent {\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  font-family: 'Segoe UI';\r\n  line-height: 36px;\r\n  letter-spacing: -0.16px;\r\n}\r\n",
        '',
      ]);
      let __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
    },
    './.storybook/preview.js': (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
      'use strict';
      __webpack_require__.r(__webpack_exports__),
        __webpack_require__.d(__webpack_exports__, { decorators: () => decorators, parameters: () => parameters });
      var react = __webpack_require__('./node_modules/cypress-storybook/react.js'),
        dedent = __webpack_require__('./node_modules/dedent/dist/dedent.js'),
        injectStylesIntoStyleTag = __webpack_require__(
          './node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        docs_root = __webpack_require__(
          './node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./.storybook/docs-root.css',
        ),
        options = {};
      (options.insert = 'head'), (options.singleton = !1);
      var update = injectStylesIntoStyleTag_default()(docs_root.Z, options);
      docs_root.Z.locals;
      var esm = __webpack_require__('./node_modules/@storybook/addon-links/dist/esm/index.js');
      let realSetCurrentStory = window.__setCurrentStory;
      window.__setCurrentStory = function (categorization, story) {
        try {
          realSetCurrentStory(categorization, story);
        } catch (e) {
          if (!('string' == typeof e.message && e.message.includes('was removed in storyStoreV7'))) throw e;
        }
      };
      let decorators = [esm.OX],
        parameters = {
          viewMode: 'docs',
          controls: { disable: !0, expanded: !0 },
          docs: {
            source: { excludeDecorators: !0, type: 'source' },
            transformSource: (snippet, story) => story.parameters.fullSource,
          },
          exportToCodeSandbox: {
            requiredDependencies: { react: '^17', 'react-dom': '^17', 'react-scripts': 'latest' },
            optionalDependencies: { '@fluentui/react-components': '^9.0.0', '@fluentui/react-icons': 'latest' },
            indexTsx: dedent`
          import * as ReactDOM from 'react-dom';
          import { FluentProvider, webLightTheme } from '@fluentui/react-components';
          import { STORY_NAME as Example } from './example';
          //
          // You can edit this example in "example.tsx".
          //
          ReactDOM.render(
              <FluentProvider theme={webLightTheme}>
                  <Example />
              </FluentProvider>,
              document.getElementById('root'),
          );`,
          },
        };
    },
    './packages/react-components/react-storybook-addon/lib/preset/preview.js': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      'use strict';
      __webpack_require__.r(__webpack_exports__),
        __webpack_require__.d(__webpack_exports__, { decorators: () => decorators });
      var react = __webpack_require__('./node_modules/react/index.js'),
        react_namespaceObject = __webpack_require__.t(react, 2),
        jsx_runtime = __webpack_require__('./node_modules/react/jsx-runtime.js'),
        TextDirectionContext_esm = __webpack_require__('./node_modules/@griffel/react/TextDirectionContext.esm.js');
      let ProviderContext = react.createContext(void 0),
        providerContextDefaultValue = { targetDocument: 'object' == typeof document ? document : void 0, dir: 'ltr' },
        Provider = ProviderContext.Provider;
      function useFluent() {
        var _React_useContext;
        return null != (_React_useContext = react.useContext(ProviderContext))
          ? _React_useContext
          : providerContextDefaultValue;
      }
      let ThemeContext = react.createContext(void 0),
        ThemeProvider = ThemeContext.Provider,
        ThemeClassNameContext = react.createContext(void 0),
        ThemeClassNameProvider = ThemeClassNameContext.Provider,
        TooltipVisibilityContext = react.createContext(void 0),
        TooltipVisibilityProvider = TooltipVisibilityContext.Provider,
        OverridesContext = react.createContext(void 0),
        OverridesProvider = OverridesContext.Provider;
      function useOverrides() {
        var _React_useContext;
        return null != (_React_useContext = react.useContext(OverridesContext)) ? _React_useContext : {};
      }
      function omit(obj, exclusions) {
        let result = {};
        for (let key in obj) -1 === exclusions.indexOf(key) && obj.hasOwnProperty(key) && (result[key] = obj[key]);
        return result;
      }
      function getSlots(state) {
        let slots = {},
          slotProps = {},
          slotNames = Object.keys(state.components);
        for (let slotName of slotNames) {
          let [slot, props] = getSlot(state, slotName);
          (slots[slotName] = slot), (slotProps[slotName] = props);
        }
        return { slots, slotProps: slotProps };
      }
      function getSlot(state, slotName) {
        var _state_components, _state_components1, _state_slotName;
        if (void 0 === state[slotName]) return [null, void 0];
        let { children, as: asProp, ...rest } = state[slotName],
          slot =
            (null == (_state_components = state.components) ? void 0 : _state_components[slotName]) === void 0 ||
            'string' == typeof state.components[slotName]
              ? asProp ||
                (null == (_state_components1 = state.components) ? void 0 : _state_components1[slotName]) ||
                'div'
              : state.components[slotName];
        if ('function' == typeof children) return [react.Fragment, { children: children(slot, rest) }];
        let shouldOmitAsProp =
            'string' == typeof slot && (null == (_state_slotName = state[slotName]) ? void 0 : _state_slotName.as),
          slotProps = shouldOmitAsProp ? omit(state[slotName], ['as']) : state[slotName];
        return [slot, slotProps];
      }
      let renderFluentProvider_unstable = (state, contextValues) => {
        let { slots, slotProps } = getSlots(state);
        return (0, jsx_runtime.jsx)(Provider, {
          value: contextValues.provider,
          children: (0, jsx_runtime.jsx)(ThemeProvider, {
            value: contextValues.theme,
            children: (0, jsx_runtime.jsx)(ThemeClassNameProvider, {
              value: contextValues.themeClassName,
              children: (0, jsx_runtime.jsx)(TooltipVisibilityProvider, {
                value: contextValues.tooltip,
                children: (0, jsx_runtime.jsx)(TextDirectionContext_esm.n, {
                  dir: contextValues.textDirection,
                  children: (0, jsx_runtime.jsx)(OverridesProvider, {
                    value: contextValues.overrides_unstable,
                    children: (0, jsx_runtime.jsx)(slots.root, { ...slotProps.root, children: state.root.children }),
                  }),
                }),
              }),
            }),
          }),
        });
      };
      try {
        (renderFluentProvider_unstable.displayName = 'renderFluentProvider_unstable'),
          (renderFluentProvider_unstable.__docgenInfo = {
            description: 'Render the final JSX of FluentProvider',
            displayName: 'renderFluentProvider_unstable',
            props: {},
          }),
          'undefined' != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES[
              'packages/react-components/react-provider/src/components/FluentProvider/renderFluentProvider.tsx#renderFluentProvider_unstable'
            ] = {
              docgenInfo: renderFluentProvider_unstable.__docgenInfo,
              name: 'renderFluentProvider_unstable',
              path:
                'packages/react-components/react-provider/src/components/FluentProvider/renderFluentProvider.tsx#renderFluentProvider_unstable',
            });
      } catch (__react_docgen_typescript_loader_error) {}
      var keyborg_esm = __webpack_require__('./node_modules/keyborg/dist/keyborg.esm.js');
      let FOCUS_VISIBLE_ATTR = 'data-fui-focus-visible';
      function applyFocusVisiblePolyfill(scope, win) {
        if (alreadyInScope(scope)) return () => void 0;
        let state = { current: void 0 },
          keyborg = (0, keyborg_esm.Vm)(win);
        keyborg.subscribe(isNavigatingWithKeyboard => {
          !isNavigatingWithKeyboard &&
            state.current &&
            (removeFocusVisibleClass(state.current), (state.current = void 0));
        });
        let keyborgListener = e => {
            state.current && (removeFocusVisibleClass(state.current), (state.current = void 0)),
              keyborg.isNavigatingWithKeyboard() &&
                isHTMLElement(e.target) &&
                e.target &&
                ((state.current = e.target), applyFocusVisibleClass(state.current));
          },
          blurListener = e => {
            (!e.relatedTarget || (isHTMLElement(e.relatedTarget) && !scope.contains(e.relatedTarget))) &&
              state.current &&
              (removeFocusVisibleClass(state.current), (state.current = void 0));
          };
        return (
          scope.addEventListener(keyborg_esm.PW, keyborgListener),
          scope.addEventListener('focusout', blurListener),
          (scope.focusVisible = !0),
          () => {
            scope.removeEventListener(keyborg_esm.PW, keyborgListener),
              scope.removeEventListener('focusout', blurListener),
              delete scope.focusVisible,
              (0, keyborg_esm.ub)(keyborg);
          }
        );
      }
      function applyFocusVisibleClass(el) {
        el.setAttribute(FOCUS_VISIBLE_ATTR, '');
      }
      function removeFocusVisibleClass(el) {
        el.removeAttribute(FOCUS_VISIBLE_ATTR);
      }
      function isHTMLElement(target) {
        return (
          !!target && Boolean(target && 'object' == typeof target && 'classList' in target && 'contains' in target)
        );
      }
      function alreadyInScope(el) {
        return !!el && (!!el.focusVisible || alreadyInScope(null == el ? void 0 : el.parentElement));
      }
      function useFocusVisible() {
        let { targetDocument } = useFluent(),
          scopeRef = react.useRef(null);
        return (
          react.useEffect(() => {
            if ((null == targetDocument ? void 0 : targetDocument.defaultView) && scopeRef.current)
              return applyFocusVisiblePolyfill(scopeRef.current, targetDocument.defaultView);
          }, [scopeRef, targetDocument]),
          scopeRef
        );
      }
      let toObjectMap = (...items) => {
          let result = {};
          for (let item of items) {
            let keys = Array.isArray(item) ? item : Object.keys(item);
            for (let key of keys) result[key] = 1;
          }
          return result;
        },
        baseElementEvents = toObjectMap([
          'onAuxClick',
          'onCopy',
          'onCut',
          'onPaste',
          'onCompositionEnd',
          'onCompositionStart',
          'onCompositionUpdate',
          'onFocus',
          'onFocusCapture',
          'onBlur',
          'onBlurCapture',
          'onChange',
          'onInput',
          'onSubmit',
          'onLoad',
          'onError',
          'onKeyDown',
          'onKeyDownCapture',
          'onKeyPress',
          'onKeyUp',
          'onAbort',
          'onCanPlay',
          'onCanPlayThrough',
          'onDurationChange',
          'onEmptied',
          'onEncrypted',
          'onEnded',
          'onLoadedData',
          'onLoadedMetadata',
          'onLoadStart',
          'onPause',
          'onPlay',
          'onPlaying',
          'onProgress',
          'onRateChange',
          'onSeeked',
          'onSeeking',
          'onStalled',
          'onSuspend',
          'onTimeUpdate',
          'onVolumeChange',
          'onWaiting',
          'onClick',
          'onClickCapture',
          'onContextMenu',
          'onDoubleClick',
          'onDrag',
          'onDragEnd',
          'onDragEnter',
          'onDragExit',
          'onDragLeave',
          'onDragOver',
          'onDragStart',
          'onDrop',
          'onMouseDown',
          'onMouseDownCapture',
          'onMouseEnter',
          'onMouseLeave',
          'onMouseMove',
          'onMouseOut',
          'onMouseOver',
          'onMouseUp',
          'onMouseUpCapture',
          'onSelect',
          'onTouchCancel',
          'onTouchEnd',
          'onTouchMove',
          'onTouchStart',
          'onScroll',
          'onWheel',
          'onPointerCancel',
          'onPointerDown',
          'onPointerEnter',
          'onPointerLeave',
          'onPointerMove',
          'onPointerOut',
          'onPointerOver',
          'onPointerUp',
          'onGotPointerCapture',
          'onLostPointerCapture',
        ]),
        baseElementProperties = toObjectMap([
          'accessKey',
          'children',
          'className',
          'contentEditable',
          'dir',
          'draggable',
          'hidden',
          'htmlFor',
          'id',
          'lang',
          'ref',
          'role',
          'style',
          'tabIndex',
          'title',
          'translate',
          'spellCheck',
          'name',
        ]),
        microdataProperties = toObjectMap(['itemID', 'itemProp', 'itemRef', 'itemScope', 'itemType']),
        htmlElementProperties = toObjectMap(baseElementProperties, baseElementEvents, microdataProperties),
        labelProperties = toObjectMap(htmlElementProperties, ['form']),
        audioProperties = toObjectMap(htmlElementProperties, ['height', 'loop', 'muted', 'preload', 'src', 'width']),
        videoProperties = toObjectMap(audioProperties, ['poster']),
        olProperties = toObjectMap(htmlElementProperties, ['start']),
        liProperties = toObjectMap(htmlElementProperties, ['value']),
        anchorProperties = toObjectMap(htmlElementProperties, [
          'download',
          'href',
          'hrefLang',
          'media',
          'rel',
          'target',
          'type',
        ]),
        timeProperties = toObjectMap(htmlElementProperties, ['dateTime']),
        buttonProperties = toObjectMap(htmlElementProperties, [
          'autoFocus',
          'disabled',
          'form',
          'formAction',
          'formEncType',
          'formMethod',
          'formNoValidate',
          'formTarget',
          'type',
          'value',
        ]),
        inputProperties = toObjectMap(buttonProperties, [
          'accept',
          'alt',
          'autoCapitalize',
          'autoComplete',
          'checked',
          'dirname',
          'form',
          'height',
          'inputMode',
          'list',
          'max',
          'maxLength',
          'min',
          'multiple',
          'pattern',
          'placeholder',
          'readOnly',
          'required',
          'src',
          'step',
          'size',
          'type',
          'value',
          'width',
        ]),
        textAreaProperties = toObjectMap(buttonProperties, [
          'autoCapitalize',
          'cols',
          'dirname',
          'form',
          'maxLength',
          'placeholder',
          'readOnly',
          'required',
          'rows',
          'wrap',
        ]),
        selectProperties = toObjectMap(buttonProperties, ['form', 'multiple', 'required']),
        optionProperties = toObjectMap(htmlElementProperties, ['selected', 'value']),
        tableProperties = toObjectMap(htmlElementProperties, ['cellPadding', 'cellSpacing']),
        thProperties = toObjectMap(htmlElementProperties, ['colSpan', 'rowSpan', 'scope']),
        tdProperties = toObjectMap(htmlElementProperties, ['colSpan', 'headers', 'rowSpan', 'scope']),
        colGroupProperties = toObjectMap(htmlElementProperties, ['span']),
        colProperties = toObjectMap(htmlElementProperties, ['span']),
        fieldsetProperties = toObjectMap(htmlElementProperties, ['disabled', 'form']),
        formProperties = toObjectMap(htmlElementProperties, [
          'acceptCharset',
          'action',
          'encType',
          'encType',
          'method',
          'noValidate',
          'target',
        ]),
        iframeProperties = toObjectMap(htmlElementProperties, [
          'allow',
          'allowFullScreen',
          'allowPaymentRequest',
          'allowTransparency',
          'csp',
          'height',
          'importance',
          'referrerPolicy',
          'sandbox',
          'src',
          'srcDoc',
          'width',
        ]),
        imgProperties = toObjectMap(htmlElementProperties, [
          'alt',
          'crossOrigin',
          'height',
          'src',
          'srcSet',
          'useMap',
          'width',
        ]),
        dialogProperties = toObjectMap(htmlElementProperties, ['open', 'onCancel', 'onClose']);
      function getNativeProps(props, allowedPropNames, excludedPropNames) {
        let isArray = Array.isArray(allowedPropNames),
          result = {},
          keys = Object.keys(props);
        for (let key of keys) {
          let isNativeProp =
            (!isArray && allowedPropNames[key]) ||
            (isArray && allowedPropNames.indexOf(key) >= 0) ||
            0 === key.indexOf('data-') ||
            0 === key.indexOf('aria-');
          isNativeProp &&
            (!excludedPropNames || (null == excludedPropNames ? void 0 : excludedPropNames.indexOf(key)) === -1) &&
            (result[key] = props[key]);
        }
        return result;
      }
      let nativeElementMap = {
        label: labelProperties,
        audio: audioProperties,
        video: videoProperties,
        ol: olProperties,
        li: liProperties,
        a: anchorProperties,
        button: buttonProperties,
        input: inputProperties,
        textarea: textAreaProperties,
        select: selectProperties,
        option: optionProperties,
        table: tableProperties,
        tr: htmlElementProperties,
        th: thProperties,
        td: tdProperties,
        colGroup: colGroupProperties,
        col: colProperties,
        fieldset: fieldsetProperties,
        form: formProperties,
        iframe: iframeProperties,
        img: imgProperties,
        time: timeProperties,
        dialog: dialogProperties,
      };
      function getNativeElementProps(tagName, props, excludedPropNames) {
        let allowedPropNames = (tagName && nativeElementMap[tagName]) || htmlElementProperties;
        return (allowedPropNames.as = 1), getNativeProps(props, allowedPropNames, excludedPropNames);
      }
      function useMergedRefs(...refs) {
        let mergedCallback = react.useCallback(
          value => {
            for (let ref of ((mergedCallback.current = value), refs))
              'function' == typeof ref ? ref(value) : ref && (ref.current = value);
          },
          [...refs],
        );
        return mergedCallback;
      }
      function canUseDOM_canUseDOM() {
        return 'undefined' != typeof window && !!(window.document && window.document.createElement);
      }
      let useIsomorphicLayoutEffect = canUseDOM_canUseDOM() ? react.useLayoutEffect : react.useEffect,
        SSRContext_defaultSSRContextValue = { current: 0 },
        SSRContext = react.createContext(void 0);
      function useSSRContext() {
        var _React_useContext;
        return null != (_React_useContext = react.useContext(SSRContext))
          ? _React_useContext
          : SSRContext_defaultSSRContextValue;
      }
      let SSRProvider = props => {
        let [value] = React.useState(() => ({ current: 0 }));
        return _jsx(SSRContext.Provider, { value: value, children: props.children });
      };
      function useIsSSR() {
        let isInSSRContext = useSSRContext() !== SSRContext_defaultSSRContextValue,
          [isSSR, setIsSSR] = React.useState(isInSSRContext);
        return (
          canUseDOM() &&
            isInSSRContext &&
            React.useLayoutEffect(() => {
              setIsSSR(!1);
            }, []),
          isSSR
        );
      }
      try {
        (useIsSSR.displayName = 'useIsSSR'),
          (useIsSSR.__docgenInfo = {
            description:
              'Returns whether the component is currently being server side rendered or hydrated on the client. Can be used to delay\nbrowser-specific rendering until after hydration. May cause re-renders on a client when is used within SSRProvider.',
            displayName: 'useIsSSR',
            props: {},
          }),
          'undefined' != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES['packages/react-components/react-utilities/src/ssr/SSRContext.tsx#useIsSSR'] = {
              docgenInfo: useIsSSR.__docgenInfo,
              name: 'useIsSSR',
              path: 'packages/react-components/react-utilities/src/ssr/SSRContext.tsx#useIsSSR',
            });
      } catch (__react_docgen_typescript_loader_error) {}
      try {
        (SSRContext_defaultSSRContextValue.displayName = 'defaultSSRContextValue'),
          (SSRContext_defaultSSRContextValue.__docgenInfo = {
            description:
              'Default context value to use in case there is no SSRProvider. This is fine for client-only apps.',
            displayName: 'defaultSSRContextValue',
            props: {},
          }),
          'undefined' != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES[
              'packages/react-components/react-utilities/src/ssr/SSRContext.tsx#defaultSSRContextValue'
            ] = {
              docgenInfo: SSRContext_defaultSSRContextValue.__docgenInfo,
              name: 'defaultSSRContextValue',
              path: 'packages/react-components/react-utilities/src/ssr/SSRContext.tsx#defaultSSRContextValue',
            });
      } catch (__react_docgen_typescript_loader_error) {}
      try {
        (SSRProvider.displayName = 'SSRProvider'),
          (SSRProvider.__docgenInfo = {
            description:
              'When using SSR with Fluent UI, applications must be wrapped in an SSRProvider. This ensures that auto generated ids\nare consistent between the client and server.',
            displayName: 'SSRProvider',
            props: {},
          }),
          'undefined' != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES['packages/react-components/react-utilities/src/ssr/SSRContext.tsx#SSRProvider'] = {
              docgenInfo: SSRProvider.__docgenInfo,
              name: 'SSRProvider',
              path: 'packages/react-components/react-utilities/src/ssr/SSRContext.tsx#SSRProvider',
            });
      } catch (__react_docgen_typescript_loader_error) {}
      let IdPrefixContext = react.createContext(void 0);
      function useIdPrefix() {
        return react.useContext(IdPrefixContext) || '';
      }
      function useId(prefix = 'fui-', providedId) {
        let contextValue = useSSRContext(),
          idPrefix = useIdPrefix(),
          _useId = react_namespaceObject.useId;
        if (_useId) {
          let generatedId = _useId(),
            escapedId = react.useMemo(() => generatedId.replace(/:/g, ''), [generatedId]);
          return providedId || `${idPrefix}${prefix}${escapedId}`;
        }
        return react.useMemo(() => providedId || `${idPrefix}${prefix}${++contextValue.current}`, [
          idPrefix,
          prefix,
          providedId,
          contextValue,
        ]);
      }
      IdPrefixContext.Provider;
      var RendererContext_esm = __webpack_require__('./node_modules/@griffel/react/RendererContext.esm.js'),
        makeStyles_esm = __webpack_require__('./node_modules/@griffel/core/makeStyles.esm.js'),
        mergeClasses_esm = __webpack_require__('./node_modules/@griffel/core/mergeClasses.esm.js');
      let tokens = {
          colorNeutralForeground1: 'var(--colorNeutralForeground1)',
          colorNeutralForeground1Hover: 'var(--colorNeutralForeground1Hover)',
          colorNeutralForeground1Pressed: 'var(--colorNeutralForeground1Pressed)',
          colorNeutralForeground1Selected: 'var(--colorNeutralForeground1Selected)',
          colorNeutralForeground2: 'var(--colorNeutralForeground2)',
          colorNeutralForeground2Hover: 'var(--colorNeutralForeground2Hover)',
          colorNeutralForeground2Pressed: 'var(--colorNeutralForeground2Pressed)',
          colorNeutralForeground2Selected: 'var(--colorNeutralForeground2Selected)',
          colorNeutralForeground2BrandHover: 'var(--colorNeutralForeground2BrandHover)',
          colorNeutralForeground2BrandPressed: 'var(--colorNeutralForeground2BrandPressed)',
          colorNeutralForeground2BrandSelected: 'var(--colorNeutralForeground2BrandSelected)',
          colorNeutralForeground3: 'var(--colorNeutralForeground3)',
          colorNeutralForeground3Hover: 'var(--colorNeutralForeground3Hover)',
          colorNeutralForeground3Pressed: 'var(--colorNeutralForeground3Pressed)',
          colorNeutralForeground3Selected: 'var(--colorNeutralForeground3Selected)',
          colorNeutralForeground3BrandHover: 'var(--colorNeutralForeground3BrandHover)',
          colorNeutralForeground3BrandPressed: 'var(--colorNeutralForeground3BrandPressed)',
          colorNeutralForeground3BrandSelected: 'var(--colorNeutralForeground3BrandSelected)',
          colorNeutralForeground4: 'var(--colorNeutralForeground4)',
          colorNeutralForegroundDisabled: 'var(--colorNeutralForegroundDisabled)',
          colorBrandForegroundLink: 'var(--colorBrandForegroundLink)',
          colorBrandForegroundLinkHover: 'var(--colorBrandForegroundLinkHover)',
          colorBrandForegroundLinkPressed: 'var(--colorBrandForegroundLinkPressed)',
          colorBrandForegroundLinkSelected: 'var(--colorBrandForegroundLinkSelected)',
          colorNeutralForeground2Link: 'var(--colorNeutralForeground2Link)',
          colorNeutralForeground2LinkHover: 'var(--colorNeutralForeground2LinkHover)',
          colorNeutralForeground2LinkPressed: 'var(--colorNeutralForeground2LinkPressed)',
          colorNeutralForeground2LinkSelected: 'var(--colorNeutralForeground2LinkSelected)',
          colorCompoundBrandForeground1: 'var(--colorCompoundBrandForeground1)',
          colorCompoundBrandForeground1Hover: 'var(--colorCompoundBrandForeground1Hover)',
          colorCompoundBrandForeground1Pressed: 'var(--colorCompoundBrandForeground1Pressed)',
          colorNeutralForegroundOnBrand: 'var(--colorNeutralForegroundOnBrand)',
          colorNeutralForegroundInverted: 'var(--colorNeutralForegroundInverted)',
          colorNeutralForegroundInvertedHover: 'var(--colorNeutralForegroundInvertedHover)',
          colorNeutralForegroundInvertedPressed: 'var(--colorNeutralForegroundInvertedPressed)',
          colorNeutralForegroundInvertedSelected: 'var(--colorNeutralForegroundInvertedSelected)',
          colorNeutralForegroundInverted2: 'var(--colorNeutralForegroundInverted2)',
          colorNeutralForegroundStaticInverted: 'var(--colorNeutralForegroundStaticInverted)',
          colorNeutralForegroundInvertedLink: 'var(--colorNeutralForegroundInvertedLink)',
          colorNeutralForegroundInvertedLinkHover: 'var(--colorNeutralForegroundInvertedLinkHover)',
          colorNeutralForegroundInvertedLinkPressed: 'var(--colorNeutralForegroundInvertedLinkPressed)',
          colorNeutralForegroundInvertedLinkSelected: 'var(--colorNeutralForegroundInvertedLinkSelected)',
          colorNeutralForegroundInvertedDisabled: 'var(--colorNeutralForegroundInvertedDisabled)',
          colorBrandForeground1: 'var(--colorBrandForeground1)',
          colorBrandForeground2: 'var(--colorBrandForeground2)',
          colorNeutralForeground1Static: 'var(--colorNeutralForeground1Static)',
          colorBrandForegroundInverted: 'var(--colorBrandForegroundInverted)',
          colorBrandForegroundInvertedHover: 'var(--colorBrandForegroundInvertedHover)',
          colorBrandForegroundInvertedPressed: 'var(--colorBrandForegroundInvertedPressed)',
          colorBrandForegroundOnLight: 'var(--colorBrandForegroundOnLight)',
          colorBrandForegroundOnLightHover: 'var(--colorBrandForegroundOnLightHover)',
          colorBrandForegroundOnLightPressed: 'var(--colorBrandForegroundOnLightPressed)',
          colorBrandForegroundOnLightSelected: 'var(--colorBrandForegroundOnLightSelected)',
          colorNeutralBackground1: 'var(--colorNeutralBackground1)',
          colorNeutralBackground1Hover: 'var(--colorNeutralBackground1Hover)',
          colorNeutralBackground1Pressed: 'var(--colorNeutralBackground1Pressed)',
          colorNeutralBackground1Selected: 'var(--colorNeutralBackground1Selected)',
          colorNeutralBackground2: 'var(--colorNeutralBackground2)',
          colorNeutralBackground2Hover: 'var(--colorNeutralBackground2Hover)',
          colorNeutralBackground2Pressed: 'var(--colorNeutralBackground2Pressed)',
          colorNeutralBackground2Selected: 'var(--colorNeutralBackground2Selected)',
          colorNeutralBackground3: 'var(--colorNeutralBackground3)',
          colorNeutralBackground3Hover: 'var(--colorNeutralBackground3Hover)',
          colorNeutralBackground3Pressed: 'var(--colorNeutralBackground3Pressed)',
          colorNeutralBackground3Selected: 'var(--colorNeutralBackground3Selected)',
          colorNeutralBackground4: 'var(--colorNeutralBackground4)',
          colorNeutralBackground4Hover: 'var(--colorNeutralBackground4Hover)',
          colorNeutralBackground4Pressed: 'var(--colorNeutralBackground4Pressed)',
          colorNeutralBackground4Selected: 'var(--colorNeutralBackground4Selected)',
          colorNeutralBackground5: 'var(--colorNeutralBackground5)',
          colorNeutralBackground5Hover: 'var(--colorNeutralBackground5Hover)',
          colorNeutralBackground5Pressed: 'var(--colorNeutralBackground5Pressed)',
          colorNeutralBackground5Selected: 'var(--colorNeutralBackground5Selected)',
          colorNeutralBackground6: 'var(--colorNeutralBackground6)',
          colorNeutralBackgroundStatic: 'var(--colorNeutralBackgroundStatic)',
          colorNeutralBackgroundInverted: 'var(--colorNeutralBackgroundInverted)',
          colorSubtleBackground: 'var(--colorSubtleBackground)',
          colorSubtleBackgroundHover: 'var(--colorSubtleBackgroundHover)',
          colorSubtleBackgroundPressed: 'var(--colorSubtleBackgroundPressed)',
          colorSubtleBackgroundSelected: 'var(--colorSubtleBackgroundSelected)',
          colorSubtleBackgroundLightAlphaHover: 'var(--colorSubtleBackgroundLightAlphaHover)',
          colorSubtleBackgroundLightAlphaPressed: 'var(--colorSubtleBackgroundLightAlphaPressed)',
          colorSubtleBackgroundLightAlphaSelected: 'var(--colorSubtleBackgroundLightAlphaSelected)',
          colorSubtleBackgroundInverted: 'var(--colorSubtleBackgroundInverted)',
          colorSubtleBackgroundInvertedHover: 'var(--colorSubtleBackgroundInvertedHover)',
          colorSubtleBackgroundInvertedPressed: 'var(--colorSubtleBackgroundInvertedPressed)',
          colorSubtleBackgroundInvertedSelected: 'var(--colorSubtleBackgroundInvertedSelected)',
          colorTransparentBackground: 'var(--colorTransparentBackground)',
          colorTransparentBackgroundHover: 'var(--colorTransparentBackgroundHover)',
          colorTransparentBackgroundPressed: 'var(--colorTransparentBackgroundPressed)',
          colorTransparentBackgroundSelected: 'var(--colorTransparentBackgroundSelected)',
          colorNeutralBackgroundDisabled: 'var(--colorNeutralBackgroundDisabled)',
          colorNeutralBackgroundInvertedDisabled: 'var(--colorNeutralBackgroundInvertedDisabled)',
          colorNeutralStencil1: 'var(--colorNeutralStencil1)',
          colorNeutralStencil2: 'var(--colorNeutralStencil2)',
          colorNeutralStencil1Alpha: 'var(--colorNeutralStencil1Alpha)',
          colorNeutralStencil2Alpha: 'var(--colorNeutralStencil2Alpha)',
          colorBackgroundOverlay: 'var(--colorBackgroundOverlay)',
          colorScrollbarOverlay: 'var(--colorScrollbarOverlay)',
          colorBrandBackground: 'var(--colorBrandBackground)',
          colorBrandBackgroundHover: 'var(--colorBrandBackgroundHover)',
          colorBrandBackgroundPressed: 'var(--colorBrandBackgroundPressed)',
          colorBrandBackgroundSelected: 'var(--colorBrandBackgroundSelected)',
          colorCompoundBrandBackground: 'var(--colorCompoundBrandBackground)',
          colorCompoundBrandBackgroundHover: 'var(--colorCompoundBrandBackgroundHover)',
          colorCompoundBrandBackgroundPressed: 'var(--colorCompoundBrandBackgroundPressed)',
          colorBrandBackgroundStatic: 'var(--colorBrandBackgroundStatic)',
          colorBrandBackground2: 'var(--colorBrandBackground2)',
          colorBrandBackgroundInverted: 'var(--colorBrandBackgroundInverted)',
          colorBrandBackgroundInvertedHover: 'var(--colorBrandBackgroundInvertedHover)',
          colorBrandBackgroundInvertedPressed: 'var(--colorBrandBackgroundInvertedPressed)',
          colorBrandBackgroundInvertedSelected: 'var(--colorBrandBackgroundInvertedSelected)',
          colorNeutralStrokeAccessible: 'var(--colorNeutralStrokeAccessible)',
          colorNeutralStrokeAccessibleHover: 'var(--colorNeutralStrokeAccessibleHover)',
          colorNeutralStrokeAccessiblePressed: 'var(--colorNeutralStrokeAccessiblePressed)',
          colorNeutralStrokeAccessibleSelected: 'var(--colorNeutralStrokeAccessibleSelected)',
          colorNeutralStroke1: 'var(--colorNeutralStroke1)',
          colorNeutralStroke1Hover: 'var(--colorNeutralStroke1Hover)',
          colorNeutralStroke1Pressed: 'var(--colorNeutralStroke1Pressed)',
          colorNeutralStroke1Selected: 'var(--colorNeutralStroke1Selected)',
          colorNeutralStroke2: 'var(--colorNeutralStroke2)',
          colorNeutralStroke3: 'var(--colorNeutralStroke3)',
          colorNeutralStrokeOnBrand: 'var(--colorNeutralStrokeOnBrand)',
          colorNeutralStrokeOnBrand2: 'var(--colorNeutralStrokeOnBrand2)',
          colorNeutralStrokeOnBrand2Hover: 'var(--colorNeutralStrokeOnBrand2Hover)',
          colorNeutralStrokeOnBrand2Pressed: 'var(--colorNeutralStrokeOnBrand2Pressed)',
          colorNeutralStrokeOnBrand2Selected: 'var(--colorNeutralStrokeOnBrand2Selected)',
          colorBrandStroke1: 'var(--colorBrandStroke1)',
          colorBrandStroke2: 'var(--colorBrandStroke2)',
          colorCompoundBrandStroke: 'var(--colorCompoundBrandStroke)',
          colorCompoundBrandStrokeHover: 'var(--colorCompoundBrandStrokeHover)',
          colorCompoundBrandStrokePressed: 'var(--colorCompoundBrandStrokePressed)',
          colorNeutralStrokeDisabled: 'var(--colorNeutralStrokeDisabled)',
          colorNeutralStrokeInvertedDisabled: 'var(--colorNeutralStrokeInvertedDisabled)',
          colorTransparentStroke: 'var(--colorTransparentStroke)',
          colorTransparentStrokeInteractive: 'var(--colorTransparentStrokeInteractive)',
          colorTransparentStrokeDisabled: 'var(--colorTransparentStrokeDisabled)',
          colorStrokeFocus1: 'var(--colorStrokeFocus1)',
          colorStrokeFocus2: 'var(--colorStrokeFocus2)',
          colorNeutralShadowAmbient: 'var(--colorNeutralShadowAmbient)',
          colorNeutralShadowKey: 'var(--colorNeutralShadowKey)',
          colorNeutralShadowAmbientLighter: 'var(--colorNeutralShadowAmbientLighter)',
          colorNeutralShadowKeyLighter: 'var(--colorNeutralShadowKeyLighter)',
          colorNeutralShadowAmbientDarker: 'var(--colorNeutralShadowAmbientDarker)',
          colorNeutralShadowKeyDarker: 'var(--colorNeutralShadowKeyDarker)',
          colorBrandShadowAmbient: 'var(--colorBrandShadowAmbient)',
          colorBrandShadowKey: 'var(--colorBrandShadowKey)',
          colorPaletteRedBackground1: 'var(--colorPaletteRedBackground1)',
          colorPaletteRedBackground2: 'var(--colorPaletteRedBackground2)',
          colorPaletteRedBackground3: 'var(--colorPaletteRedBackground3)',
          colorPaletteRedBorderActive: 'var(--colorPaletteRedBorderActive)',
          colorPaletteRedBorder1: 'var(--colorPaletteRedBorder1)',
          colorPaletteRedBorder2: 'var(--colorPaletteRedBorder2)',
          colorPaletteRedForeground1: 'var(--colorPaletteRedForeground1)',
          colorPaletteRedForeground2: 'var(--colorPaletteRedForeground2)',
          colorPaletteRedForeground3: 'var(--colorPaletteRedForeground3)',
          colorPaletteRedForegroundInverted: 'var(--colorPaletteRedForegroundInverted)',
          colorPaletteGreenBackground1: 'var(--colorPaletteGreenBackground1)',
          colorPaletteGreenBackground2: 'var(--colorPaletteGreenBackground2)',
          colorPaletteGreenBackground3: 'var(--colorPaletteGreenBackground3)',
          colorPaletteGreenBorderActive: 'var(--colorPaletteGreenBorderActive)',
          colorPaletteGreenBorder1: 'var(--colorPaletteGreenBorder1)',
          colorPaletteGreenBorder2: 'var(--colorPaletteGreenBorder2)',
          colorPaletteGreenForeground1: 'var(--colorPaletteGreenForeground1)',
          colorPaletteGreenForeground2: 'var(--colorPaletteGreenForeground2)',
          colorPaletteGreenForeground3: 'var(--colorPaletteGreenForeground3)',
          colorPaletteGreenForegroundInverted: 'var(--colorPaletteGreenForegroundInverted)',
          colorPaletteDarkOrangeBackground1: 'var(--colorPaletteDarkOrangeBackground1)',
          colorPaletteDarkOrangeBackground2: 'var(--colorPaletteDarkOrangeBackground2)',
          colorPaletteDarkOrangeBackground3: 'var(--colorPaletteDarkOrangeBackground3)',
          colorPaletteDarkOrangeBorderActive: 'var(--colorPaletteDarkOrangeBorderActive)',
          colorPaletteDarkOrangeBorder1: 'var(--colorPaletteDarkOrangeBorder1)',
          colorPaletteDarkOrangeBorder2: 'var(--colorPaletteDarkOrangeBorder2)',
          colorPaletteDarkOrangeForeground1: 'var(--colorPaletteDarkOrangeForeground1)',
          colorPaletteDarkOrangeForeground2: 'var(--colorPaletteDarkOrangeForeground2)',
          colorPaletteDarkOrangeForeground3: 'var(--colorPaletteDarkOrangeForeground3)',
          colorPaletteYellowBackground1: 'var(--colorPaletteYellowBackground1)',
          colorPaletteYellowBackground2: 'var(--colorPaletteYellowBackground2)',
          colorPaletteYellowBackground3: 'var(--colorPaletteYellowBackground3)',
          colorPaletteYellowBorderActive: 'var(--colorPaletteYellowBorderActive)',
          colorPaletteYellowBorder1: 'var(--colorPaletteYellowBorder1)',
          colorPaletteYellowBorder2: 'var(--colorPaletteYellowBorder2)',
          colorPaletteYellowForeground1: 'var(--colorPaletteYellowForeground1)',
          colorPaletteYellowForeground2: 'var(--colorPaletteYellowForeground2)',
          colorPaletteYellowForeground3: 'var(--colorPaletteYellowForeground3)',
          colorPaletteYellowForegroundInverted: 'var(--colorPaletteYellowForegroundInverted)',
          colorPaletteBerryBackground1: 'var(--colorPaletteBerryBackground1)',
          colorPaletteBerryBackground2: 'var(--colorPaletteBerryBackground2)',
          colorPaletteBerryBackground3: 'var(--colorPaletteBerryBackground3)',
          colorPaletteBerryBorderActive: 'var(--colorPaletteBerryBorderActive)',
          colorPaletteBerryBorder1: 'var(--colorPaletteBerryBorder1)',
          colorPaletteBerryBorder2: 'var(--colorPaletteBerryBorder2)',
          colorPaletteBerryForeground1: 'var(--colorPaletteBerryForeground1)',
          colorPaletteBerryForeground2: 'var(--colorPaletteBerryForeground2)',
          colorPaletteBerryForeground3: 'var(--colorPaletteBerryForeground3)',
          colorPaletteMarigoldBackground1: 'var(--colorPaletteMarigoldBackground1)',
          colorPaletteMarigoldBackground2: 'var(--colorPaletteMarigoldBackground2)',
          colorPaletteMarigoldBackground3: 'var(--colorPaletteMarigoldBackground3)',
          colorPaletteMarigoldBorderActive: 'var(--colorPaletteMarigoldBorderActive)',
          colorPaletteMarigoldBorder1: 'var(--colorPaletteMarigoldBorder1)',
          colorPaletteMarigoldBorder2: 'var(--colorPaletteMarigoldBorder2)',
          colorPaletteMarigoldForeground1: 'var(--colorPaletteMarigoldForeground1)',
          colorPaletteMarigoldForeground2: 'var(--colorPaletteMarigoldForeground2)',
          colorPaletteMarigoldForeground3: 'var(--colorPaletteMarigoldForeground3)',
          colorPaletteLightGreenBackground1: 'var(--colorPaletteLightGreenBackground1)',
          colorPaletteLightGreenBackground2: 'var(--colorPaletteLightGreenBackground2)',
          colorPaletteLightGreenBackground3: 'var(--colorPaletteLightGreenBackground3)',
          colorPaletteLightGreenBorderActive: 'var(--colorPaletteLightGreenBorderActive)',
          colorPaletteLightGreenBorder1: 'var(--colorPaletteLightGreenBorder1)',
          colorPaletteLightGreenBorder2: 'var(--colorPaletteLightGreenBorder2)',
          colorPaletteLightGreenForeground1: 'var(--colorPaletteLightGreenForeground1)',
          colorPaletteLightGreenForeground2: 'var(--colorPaletteLightGreenForeground2)',
          colorPaletteLightGreenForeground3: 'var(--colorPaletteLightGreenForeground3)',
          colorPaletteAnchorBackground2: 'var(--colorPaletteAnchorBackground2)',
          colorPaletteAnchorBorderActive: 'var(--colorPaletteAnchorBorderActive)',
          colorPaletteAnchorForeground2: 'var(--colorPaletteAnchorForeground2)',
          colorPaletteBeigeBackground2: 'var(--colorPaletteBeigeBackground2)',
          colorPaletteBeigeBorderActive: 'var(--colorPaletteBeigeBorderActive)',
          colorPaletteBeigeForeground2: 'var(--colorPaletteBeigeForeground2)',
          colorPaletteBlueBackground2: 'var(--colorPaletteBlueBackground2)',
          colorPaletteBlueBorderActive: 'var(--colorPaletteBlueBorderActive)',
          colorPaletteBlueForeground2: 'var(--colorPaletteBlueForeground2)',
          colorPaletteBrassBackground2: 'var(--colorPaletteBrassBackground2)',
          colorPaletteBrassBorderActive: 'var(--colorPaletteBrassBorderActive)',
          colorPaletteBrassForeground2: 'var(--colorPaletteBrassForeground2)',
          colorPaletteBrownBackground2: 'var(--colorPaletteBrownBackground2)',
          colorPaletteBrownBorderActive: 'var(--colorPaletteBrownBorderActive)',
          colorPaletteBrownForeground2: 'var(--colorPaletteBrownForeground2)',
          colorPaletteCornflowerBackground2: 'var(--colorPaletteCornflowerBackground2)',
          colorPaletteCornflowerBorderActive: 'var(--colorPaletteCornflowerBorderActive)',
          colorPaletteCornflowerForeground2: 'var(--colorPaletteCornflowerForeground2)',
          colorPaletteCranberryBackground2: 'var(--colorPaletteCranberryBackground2)',
          colorPaletteCranberryBorderActive: 'var(--colorPaletteCranberryBorderActive)',
          colorPaletteCranberryForeground2: 'var(--colorPaletteCranberryForeground2)',
          colorPaletteDarkGreenBackground2: 'var(--colorPaletteDarkGreenBackground2)',
          colorPaletteDarkGreenBorderActive: 'var(--colorPaletteDarkGreenBorderActive)',
          colorPaletteDarkGreenForeground2: 'var(--colorPaletteDarkGreenForeground2)',
          colorPaletteDarkRedBackground2: 'var(--colorPaletteDarkRedBackground2)',
          colorPaletteDarkRedBorderActive: 'var(--colorPaletteDarkRedBorderActive)',
          colorPaletteDarkRedForeground2: 'var(--colorPaletteDarkRedForeground2)',
          colorPaletteForestBackground2: 'var(--colorPaletteForestBackground2)',
          colorPaletteForestBorderActive: 'var(--colorPaletteForestBorderActive)',
          colorPaletteForestForeground2: 'var(--colorPaletteForestForeground2)',
          colorPaletteGoldBackground2: 'var(--colorPaletteGoldBackground2)',
          colorPaletteGoldBorderActive: 'var(--colorPaletteGoldBorderActive)',
          colorPaletteGoldForeground2: 'var(--colorPaletteGoldForeground2)',
          colorPaletteGrapeBackground2: 'var(--colorPaletteGrapeBackground2)',
          colorPaletteGrapeBorderActive: 'var(--colorPaletteGrapeBorderActive)',
          colorPaletteGrapeForeground2: 'var(--colorPaletteGrapeForeground2)',
          colorPaletteLavenderBackground2: 'var(--colorPaletteLavenderBackground2)',
          colorPaletteLavenderBorderActive: 'var(--colorPaletteLavenderBorderActive)',
          colorPaletteLavenderForeground2: 'var(--colorPaletteLavenderForeground2)',
          colorPaletteLightTealBackground2: 'var(--colorPaletteLightTealBackground2)',
          colorPaletteLightTealBorderActive: 'var(--colorPaletteLightTealBorderActive)',
          colorPaletteLightTealForeground2: 'var(--colorPaletteLightTealForeground2)',
          colorPaletteLilacBackground2: 'var(--colorPaletteLilacBackground2)',
          colorPaletteLilacBorderActive: 'var(--colorPaletteLilacBorderActive)',
          colorPaletteLilacForeground2: 'var(--colorPaletteLilacForeground2)',
          colorPaletteMagentaBackground2: 'var(--colorPaletteMagentaBackground2)',
          colorPaletteMagentaBorderActive: 'var(--colorPaletteMagentaBorderActive)',
          colorPaletteMagentaForeground2: 'var(--colorPaletteMagentaForeground2)',
          colorPaletteMinkBackground2: 'var(--colorPaletteMinkBackground2)',
          colorPaletteMinkBorderActive: 'var(--colorPaletteMinkBorderActive)',
          colorPaletteMinkForeground2: 'var(--colorPaletteMinkForeground2)',
          colorPaletteNavyBackground2: 'var(--colorPaletteNavyBackground2)',
          colorPaletteNavyBorderActive: 'var(--colorPaletteNavyBorderActive)',
          colorPaletteNavyForeground2: 'var(--colorPaletteNavyForeground2)',
          colorPalettePeachBackground2: 'var(--colorPalettePeachBackground2)',
          colorPalettePeachBorderActive: 'var(--colorPalettePeachBorderActive)',
          colorPalettePeachForeground2: 'var(--colorPalettePeachForeground2)',
          colorPalettePinkBackground2: 'var(--colorPalettePinkBackground2)',
          colorPalettePinkBorderActive: 'var(--colorPalettePinkBorderActive)',
          colorPalettePinkForeground2: 'var(--colorPalettePinkForeground2)',
          colorPalettePlatinumBackground2: 'var(--colorPalettePlatinumBackground2)',
          colorPalettePlatinumBorderActive: 'var(--colorPalettePlatinumBorderActive)',
          colorPalettePlatinumForeground2: 'var(--colorPalettePlatinumForeground2)',
          colorPalettePlumBackground2: 'var(--colorPalettePlumBackground2)',
          colorPalettePlumBorderActive: 'var(--colorPalettePlumBorderActive)',
          colorPalettePlumForeground2: 'var(--colorPalettePlumForeground2)',
          colorPalettePumpkinBackground2: 'var(--colorPalettePumpkinBackground2)',
          colorPalettePumpkinBorderActive: 'var(--colorPalettePumpkinBorderActive)',
          colorPalettePumpkinForeground2: 'var(--colorPalettePumpkinForeground2)',
          colorPalettePurpleBackground2: 'var(--colorPalettePurpleBackground2)',
          colorPalettePurpleBorderActive: 'var(--colorPalettePurpleBorderActive)',
          colorPalettePurpleForeground2: 'var(--colorPalettePurpleForeground2)',
          colorPaletteRoyalBlueBackground2: 'var(--colorPaletteRoyalBlueBackground2)',
          colorPaletteRoyalBlueBorderActive: 'var(--colorPaletteRoyalBlueBorderActive)',
          colorPaletteRoyalBlueForeground2: 'var(--colorPaletteRoyalBlueForeground2)',
          colorPaletteSeafoamBackground2: 'var(--colorPaletteSeafoamBackground2)',
          colorPaletteSeafoamBorderActive: 'var(--colorPaletteSeafoamBorderActive)',
          colorPaletteSeafoamForeground2: 'var(--colorPaletteSeafoamForeground2)',
          colorPaletteSteelBackground2: 'var(--colorPaletteSteelBackground2)',
          colorPaletteSteelBorderActive: 'var(--colorPaletteSteelBorderActive)',
          colorPaletteSteelForeground2: 'var(--colorPaletteSteelForeground2)',
          colorPaletteTealBackground2: 'var(--colorPaletteTealBackground2)',
          colorPaletteTealBorderActive: 'var(--colorPaletteTealBorderActive)',
          colorPaletteTealForeground2: 'var(--colorPaletteTealForeground2)',
          borderRadiusNone: 'var(--borderRadiusNone)',
          borderRadiusSmall: 'var(--borderRadiusSmall)',
          borderRadiusMedium: 'var(--borderRadiusMedium)',
          borderRadiusLarge: 'var(--borderRadiusLarge)',
          borderRadiusXLarge: 'var(--borderRadiusXLarge)',
          borderRadiusCircular: 'var(--borderRadiusCircular)',
          fontFamilyBase: 'var(--fontFamilyBase)',
          fontFamilyMonospace: 'var(--fontFamilyMonospace)',
          fontFamilyNumeric: 'var(--fontFamilyNumeric)',
          fontSizeBase100: 'var(--fontSizeBase100)',
          fontSizeBase200: 'var(--fontSizeBase200)',
          fontSizeBase300: 'var(--fontSizeBase300)',
          fontSizeBase400: 'var(--fontSizeBase400)',
          fontSizeBase500: 'var(--fontSizeBase500)',
          fontSizeBase600: 'var(--fontSizeBase600)',
          fontSizeHero700: 'var(--fontSizeHero700)',
          fontSizeHero800: 'var(--fontSizeHero800)',
          fontSizeHero900: 'var(--fontSizeHero900)',
          fontSizeHero1000: 'var(--fontSizeHero1000)',
          fontWeightRegular: 'var(--fontWeightRegular)',
          fontWeightMedium: 'var(--fontWeightMedium)',
          fontWeightSemibold: 'var(--fontWeightSemibold)',
          fontWeightBold: 'var(--fontWeightBold)',
          lineHeightBase100: 'var(--lineHeightBase100)',
          lineHeightBase200: 'var(--lineHeightBase200)',
          lineHeightBase300: 'var(--lineHeightBase300)',
          lineHeightBase400: 'var(--lineHeightBase400)',
          lineHeightBase500: 'var(--lineHeightBase500)',
          lineHeightBase600: 'var(--lineHeightBase600)',
          lineHeightHero700: 'var(--lineHeightHero700)',
          lineHeightHero800: 'var(--lineHeightHero800)',
          lineHeightHero900: 'var(--lineHeightHero900)',
          lineHeightHero1000: 'var(--lineHeightHero1000)',
          shadow2: 'var(--shadow2)',
          shadow4: 'var(--shadow4)',
          shadow8: 'var(--shadow8)',
          shadow16: 'var(--shadow16)',
          shadow28: 'var(--shadow28)',
          shadow64: 'var(--shadow64)',
          shadow2Brand: 'var(--shadow2Brand)',
          shadow4Brand: 'var(--shadow4Brand)',
          shadow8Brand: 'var(--shadow8Brand)',
          shadow16Brand: 'var(--shadow16Brand)',
          shadow28Brand: 'var(--shadow28Brand)',
          shadow64Brand: 'var(--shadow64Brand)',
          strokeWidthThin: 'var(--strokeWidthThin)',
          strokeWidthThick: 'var(--strokeWidthThick)',
          strokeWidthThicker: 'var(--strokeWidthThicker)',
          strokeWidthThickest: 'var(--strokeWidthThickest)',
          spacingHorizontalNone: 'var(--spacingHorizontalNone)',
          spacingHorizontalXXS: 'var(--spacingHorizontalXXS)',
          spacingHorizontalXS: 'var(--spacingHorizontalXS)',
          spacingHorizontalSNudge: 'var(--spacingHorizontalSNudge)',
          spacingHorizontalS: 'var(--spacingHorizontalS)',
          spacingHorizontalMNudge: 'var(--spacingHorizontalMNudge)',
          spacingHorizontalM: 'var(--spacingHorizontalM)',
          spacingHorizontalL: 'var(--spacingHorizontalL)',
          spacingHorizontalXL: 'var(--spacingHorizontalXL)',
          spacingHorizontalXXL: 'var(--spacingHorizontalXXL)',
          spacingHorizontalXXXL: 'var(--spacingHorizontalXXXL)',
          spacingVerticalNone: 'var(--spacingVerticalNone)',
          spacingVerticalXXS: 'var(--spacingVerticalXXS)',
          spacingVerticalXS: 'var(--spacingVerticalXS)',
          spacingVerticalSNudge: 'var(--spacingVerticalSNudge)',
          spacingVerticalS: 'var(--spacingVerticalS)',
          spacingVerticalMNudge: 'var(--spacingVerticalMNudge)',
          spacingVerticalM: 'var(--spacingVerticalM)',
          spacingVerticalL: 'var(--spacingVerticalL)',
          spacingVerticalXL: 'var(--spacingVerticalXL)',
          spacingVerticalXXL: 'var(--spacingVerticalXXL)',
          spacingVerticalXXXL: 'var(--spacingVerticalXXXL)',
          durationUltraFast: 'var(--durationUltraFast)',
          durationFaster: 'var(--durationFaster)',
          durationFast: 'var(--durationFast)',
          durationNormal: 'var(--durationNormal)',
          durationSlow: 'var(--durationSlow)',
          durationSlower: 'var(--durationSlower)',
          durationUltraSlow: 'var(--durationUltraSlow)',
          curveAccelerateMax: 'var(--curveAccelerateMax)',
          curveAccelerateMid: 'var(--curveAccelerateMid)',
          curveAccelerateMin: 'var(--curveAccelerateMin)',
          curveDecelerateMax: 'var(--curveDecelerateMax)',
          curveDecelerateMid: 'var(--curveDecelerateMid)',
          curveDecelerateMin: 'var(--curveDecelerateMin)',
          curveEasyEaseMax: 'var(--curveEasyEaseMax)',
          curveEasyEase: 'var(--curveEasyEase)',
          curveLinear: 'var(--curveLinear)',
        },
        typographyStyles = {
          body1: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeBase300,
            fontWeight: tokens.fontWeightRegular,
            lineHeight: tokens.lineHeightBase300,
          },
          body1Strong: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeBase300,
            fontWeight: tokens.fontWeightSemibold,
            lineHeight: tokens.lineHeightBase300,
          },
          body1Stronger: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeBase300,
            fontWeight: tokens.fontWeightBold,
            lineHeight: tokens.lineHeightBase300,
          },
          body2: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeBase400,
            fontWeight: tokens.fontWeightRegular,
            lineHeight: tokens.lineHeightBase400,
          },
          caption1: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeBase200,
            fontWeight: tokens.fontWeightRegular,
            lineHeight: tokens.lineHeightBase200,
          },
          caption1Strong: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeBase200,
            fontWeight: tokens.fontWeightSemibold,
            lineHeight: tokens.lineHeightBase200,
          },
          caption1Stronger: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeBase200,
            fontWeight: tokens.fontWeightBold,
            lineHeight: tokens.lineHeightBase200,
          },
          caption2: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeBase100,
            fontWeight: tokens.fontWeightRegular,
            lineHeight: tokens.lineHeightBase100,
          },
          caption2Strong: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeBase100,
            fontWeight: tokens.fontWeightSemibold,
            lineHeight: tokens.lineHeightBase100,
          },
          subtitle1: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeBase500,
            fontWeight: tokens.fontWeightSemibold,
            lineHeight: tokens.lineHeightBase500,
          },
          subtitle2: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeBase400,
            fontWeight: tokens.fontWeightSemibold,
            lineHeight: tokens.lineHeightBase400,
          },
          subtitle2Stronger: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeBase400,
            fontWeight: tokens.fontWeightBold,
            lineHeight: tokens.lineHeightBase400,
          },
          title1: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeHero800,
            fontWeight: tokens.fontWeightSemibold,
            lineHeight: tokens.lineHeightHero800,
          },
          title2: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeHero700,
            fontWeight: tokens.fontWeightSemibold,
            lineHeight: tokens.lineHeightHero700,
          },
          title3: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeBase600,
            fontWeight: tokens.fontWeightSemibold,
            lineHeight: tokens.lineHeightBase600,
          },
          largeTitle: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeHero900,
            fontWeight: tokens.fontWeightSemibold,
            lineHeight: tokens.lineHeightHero900,
          },
          display: {
            fontFamily: tokens.fontFamilyBase,
            fontSize: tokens.fontSizeHero1000,
            fontWeight: tokens.fontWeightSemibold,
            lineHeight: tokens.lineHeightHero1000,
          },
        },
        fluentProviderClassNames = { root: 'fui-FluentProvider' },
        useStyles = (0, makeStyles_esm.Z)({
          root: {
            color: tokens.colorNeutralForeground1,
            backgroundColor: tokens.colorNeutralBackground1,
            textAlign: 'left',
            ...typographyStyles.body1,
          },
        }),
        useFluentProviderStyles_unstable = state => {
          let renderer = (0, RendererContext_esm.a)(),
            styles = useStyles({ dir: state.dir, renderer });
          return (
            (state.root.className = (0, mergeClasses_esm.z)(
              fluentProviderClassNames.root,
              state.themeClassName,
              styles.root,
              state.root.className,
            )),
            state
          );
        },
        useInsertionEffect = react_namespaceObject.useInsertionEffect
          ? react_namespaceObject.useInsertionEffect
          : useIsomorphicLayoutEffect,
        createStyleTag = (target, elementAttributes) => {
          if (!target) return;
          let tag = target.createElement('style');
          return (
            Object.keys(elementAttributes).forEach(attrName => {
              tag.setAttribute(attrName, elementAttributes[attrName]);
            }),
            target.head.appendChild(tag),
            tag
          );
        },
        insertSheet = (tag, rule) => {
          let sheet = tag.sheet;
          sheet && (sheet.cssRules.length > 0 && sheet.deleteRule(0), sheet.insertRule(rule, 0));
        },
        useFluentProviderThemeStyleTag = options => {
          let { targetDocument, theme } = options,
            renderer = (0, RendererContext_esm.a)(),
            styleTag = react.useRef(),
            styleTagId = useId(fluentProviderClassNames.root),
            styleElementAttributes = renderer.styleElementAttributes,
            cssVarsAsString = react.useMemo(
              () =>
                theme
                  ? Object.keys(theme).reduce(
                      (cssVarRule, cssVar) => (cssVarRule += `--${cssVar}: ${theme[cssVar]}; `),
                      '',
                    )
                  : '',
              [theme],
            ),
            rule = `.${styleTagId} { ${cssVarsAsString} }`;
          return (
            useInsertionEffect(() => {
              if (
                ((styleTag.current = createStyleTag(targetDocument, { ...styleElementAttributes, id: styleTagId })),
                styleTag.current)
              )
                return (
                  insertSheet(styleTag.current, rule),
                  () => {
                    var _styleTag_current;
                    null == (_styleTag_current = styleTag.current) || _styleTag_current.remove();
                  }
                );
            }, [styleTagId, targetDocument, rule, styleElementAttributes]),
            styleTagId
          );
        },
        useFluentProvider_unstable = (props, ref) => {
          let parentContext = useFluent(),
            parentTheme = useTheme(),
            parentOverrides = useOverrides(),
            {
              applyStylesToPortals = !0,
              dir = parentContext.dir,
              targetDocument = parentContext.targetDocument,
              theme,
              overrides_unstable: overrides = {},
            } = props,
            mergedTheme = shallowMerge(parentTheme, theme),
            mergedOverrides = shallowMerge(parentOverrides, overrides);
          return (
            react.useEffect(() => {}, []),
            {
              applyStylesToPortals,
              dir,
              targetDocument,
              theme: mergedTheme,
              overrides_unstable: mergedOverrides,
              themeClassName: useFluentProviderThemeStyleTag({ theme: mergedTheme, targetDocument }),
              components: { root: 'div' },
              root: getNativeElementProps('div', { ...props, dir, ref: useMergedRefs(ref, useFocusVisible()) }),
            }
          );
        };
      function shallowMerge(a, b) {
        return a && b ? { ...a, ...b } : a || b;
      }
      function useTheme() {
        return react.useContext(ThemeContext);
      }
      function useFluentProviderContextValues_unstable(state) {
        let { applyStylesToPortals, dir, root, targetDocument, theme, themeClassName, overrides_unstable } = state,
          provider = react.useMemo(() => ({ dir, targetDocument }), [dir, targetDocument]),
          [tooltip] = react.useState(() => ({}));
        return {
          overrides_unstable,
          provider,
          textDirection: dir,
          tooltip,
          theme,
          themeClassName: applyStylesToPortals ? root.className : themeClassName,
        };
      }
      let FluentProvider = react.forwardRef((props, ref) => {
        let state = useFluentProvider_unstable(props, ref);
        useFluentProviderStyles_unstable(state);
        let contextValues = useFluentProviderContextValues_unstable(state);
        return renderFluentProvider_unstable(state, contextValues);
      });
      FluentProvider.displayName = 'FluentProvider';
      try {
        (FluentProvider.displayName = 'FluentProvider'),
          (FluentProvider.__docgenInfo = {
            description: '',
            displayName: 'FluentProvider',
            props: {
              as: {
                defaultValue: null,
                description: '',
                name: 'as',
                required: !1,
                type: { name: 'enum', value: [{ value: '"div"' }] },
              },
              applyStylesToPortals: {
                defaultValue: { value: 'true' },
                description: 'Passes styles applied to a component down to portals if enabled.',
                name: 'applyStylesToPortals',
                required: !1,
                type: { name: 'boolean' },
              },
              dir: {
                defaultValue: null,
                description: 'Sets the direction of text & generated styles.',
                name: 'dir',
                required: !1,
                type: { name: 'enum', value: [{ value: '"ltr"' }, { value: '"rtl"' }] },
              },
              targetDocument: {
                defaultValue: null,
                description: 'Provides the document, can be undefined during SSR render.',
                name: 'targetDocument',
                required: !1,
                type: { name: 'Document' },
              },
              theme: {
                defaultValue: null,
                description: 'Sets the theme used in a scope.',
                name: 'theme',
                required: !1,
                type: { name: 'Partial<Theme>' },
              },
              overrides_unstable: {
                defaultValue: null,
                description: '',
                name: 'overrides_unstable',
                required: !1,
                type: { name: 'OverridesContextValue_unstable' },
              },
            },
          }),
          'undefined' != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES[
              'packages/react-components/react-provider/src/components/FluentProvider/FluentProvider.tsx#FluentProvider'
            ] = {
              docgenInfo: FluentProvider.__docgenInfo,
              name: 'FluentProvider',
              path:
                'packages/react-components/react-provider/src/components/FluentProvider/FluentProvider.tsx#FluentProvider',
            });
      } catch (__react_docgen_typescript_loader_error) {}
      let grey = {
          0: '#000000',
          2: '#050505',
          4: '#0a0a0a',
          6: '#0f0f0f',
          8: '#141414',
          10: '#1a1a1a',
          12: '#1f1f1f',
          14: '#242424',
          16: '#292929',
          18: '#2e2e2e',
          20: '#333333',
          22: '#383838',
          24: '#3d3d3d',
          26: '#424242',
          28: '#474747',
          30: '#4d4d4d',
          32: '#525252',
          34: '#575757',
          36: '#5c5c5c',
          38: '#616161',
          40: '#666666',
          42: '#6b6b6b',
          44: '#707070',
          46: '#757575',
          48: '#7a7a7a',
          50: '#808080',
          52: '#858585',
          54: '#8a8a8a',
          56: '#8f8f8f',
          58: '#949494',
          60: '#999999',
          62: '#9e9e9e',
          64: '#a3a3a3',
          66: '#a8a8a8',
          68: '#adadad',
          70: '#b3b3b3',
          72: '#b8b8b8',
          74: '#bdbdbd',
          76: '#c2c2c2',
          78: '#c7c7c7',
          80: '#cccccc',
          82: '#d1d1d1',
          84: '#d6d6d6',
          86: '#dbdbdb',
          88: '#e0e0e0',
          90: '#e6e6e6',
          92: '#ebebeb',
          94: '#f0f0f0',
          96: '#f5f5f5',
          98: '#fafafa',
          100: '#ffffff',
        },
        whiteAlpha = {
          5: 'rgba(255, 255, 255, 0.05)',
          10: 'rgba(255, 255, 255, 0.1)',
          20: 'rgba(255, 255, 255, 0.2)',
          30: 'rgba(255, 255, 255, 0.3)',
          40: 'rgba(255, 255, 255, 0.4)',
          50: 'rgba(255, 255, 255, 0.5)',
          60: 'rgba(255, 255, 255, 0.6)',
          70: 'rgba(255, 255, 255, 0.7)',
          80: 'rgba(255, 255, 255, 0.8)',
          90: 'rgba(255, 255, 255, 0.9)',
        },
        blackAlpha = {
          5: 'rgba(0, 0, 0, 0.05)',
          10: 'rgba(0, 0, 0, 0.1)',
          20: 'rgba(0, 0, 0, 0.2)',
          30: 'rgba(0, 0, 0, 0.3)',
          40: 'rgba(0, 0, 0, 0.4)',
          50: 'rgba(0, 0, 0, 0.5)',
          60: 'rgba(0, 0, 0, 0.6)',
          70: 'rgba(0, 0, 0, 0.7)',
          80: 'rgba(0, 0, 0, 0.8)',
          90: 'rgba(0, 0, 0, 0.9)',
        },
        grey14Alpha = {
          5: 'rgba(36, 36, 36, 0.05)',
          10: 'rgba(36, 36, 36, 0.1)',
          20: 'rgba(36, 36, 36, 0.2)',
          30: 'rgba(36, 36, 36, 0.3)',
          40: 'rgba(36, 36, 36, 0.4)',
          50: 'rgba(36, 36, 36, 0.5)',
          60: 'rgba(36, 36, 36, 0.6)',
          70: 'rgba(36, 36, 36, 0.7)',
          80: 'rgba(36, 36, 36, 0.8)',
          90: 'rgba(36, 36, 36, 0.9)',
        },
        white = '#ffffff',
        black = '#000000',
        hcHyperlink = '#ffff00',
        hcHighlight = '#1aebff',
        hcDisabled = '#3ff23f',
        hcCanvas = '#000000',
        hcCanvasText = '#ffffff',
        hcHighlightText = '#000000',
        hcButtonText = '#000000',
        hcButtonFace = '#ffffff',
        darkRed = {
          shade50: '#130204',
          shade40: '#230308',
          shade30: '#420610',
          shade20: '#590815',
          shade10: '#690a19',
          primary: '#750b1c',
          tint10: '#861b2c',
          tint20: '#962f3f',
          tint30: '#ac4f5e',
          tint40: '#d69ca5',
          tint50: '#e9c7cd',
          tint60: '#f9f0f2',
        },
        cranberry = {
          shade50: '#200205',
          shade40: '#3b0509',
          shade30: '#6e0811',
          shade20: '#960b18',
          shade10: '#b10e1c',
          primary: '#c50f1f',
          tint10: '#cc2635',
          tint20: '#d33f4c',
          tint30: '#dc626d',
          tint40: '#eeacb2',
          tint50: '#f6d1d5',
          tint60: '#fdf3f4',
        },
        red = {
          shade50: '#210809',
          shade40: '#3f1011',
          shade30: '#751d1f',
          shade20: '#9f282b',
          shade10: '#bc2f32',
          primary: '#d13438',
          tint10: '#d7494c',
          tint20: '#dc5e62',
          tint30: '#e37d80',
          tint40: '#f1bbbc',
          tint50: '#f8dadb',
          tint60: '#fdf6f6',
        },
        darkOrange = {
          shade50: '#230900',
          shade40: '#411200',
          shade30: '#7a2101',
          shade20: '#a62d01',
          shade10: '#c43501',
          primary: '#da3b01',
          tint10: '#de501c',
          tint20: '#e36537',
          tint30: '#e9835e',
          tint40: '#f4bfab',
          tint50: '#f9dcd1',
          tint60: '#fdf6f3',
        },
        pumpkin = {
          shade50: '#200d03',
          shade40: '#3d1805',
          shade30: '#712d09',
          shade20: '#9a3d0c',
          shade10: '#b6480e',
          primary: '#ca5010',
          tint10: '#d06228',
          tint20: '#d77440',
          tint30: '#df8e64',
          tint40: '#efc4ad',
          tint50: '#f7dfd2',
          tint60: '#fdf7f4',
        },
        peach = {
          shade50: '#291600',
          shade40: '#4d2a00',
          shade30: '#8f4e00',
          shade20: '#c26a00',
          shade10: '#e67e00',
          primary: '#ff8c00',
          tint10: '#ff9a1f',
          tint20: '#ffa83d',
          tint30: '#ffba66',
          tint40: '#ffddb3',
          tint50: '#ffedd6',
          tint60: '#fffaf5',
        },
        marigold = {
          shade50: '#251a00',
          shade40: '#463100',
          shade30: '#835b00',
          shade20: '#b27c00',
          shade10: '#d39300',
          primary: '#eaa300',
          tint10: '#edad1c',
          tint20: '#efb839',
          tint30: '#f2c661',
          tint40: '#f9e2ae',
          tint50: '#fcefd3',
          tint60: '#fefbf4',
        },
        yellow = {
          primary: '#fde300',
          shade10: '#e4cc00',
          shade20: '#c0ad00',
          shade30: '#817400',
          shade40: '#4c4400',
          shade50: '#282400',
          tint10: '#fde61e',
          tint20: '#fdea3d',
          tint30: '#feee66',
          tint40: '#fef7b2',
          tint50: '#fffad6',
          tint60: '#fffef5',
        },
        gold = {
          shade50: '#1f1900',
          shade40: '#3a2f00',
          shade30: '#6c5700',
          shade20: '#937700',
          shade10: '#ae8c00',
          primary: '#c19c00',
          tint10: '#c8a718',
          tint20: '#d0b232',
          tint30: '#dac157',
          tint40: '#ecdfa5',
          tint50: '#f5eece',
          tint60: '#fdfbf2',
        },
        brass = {
          shade50: '#181202',
          shade40: '#2e2103',
          shade30: '#553e06',
          shade20: '#745408',
          shade10: '#89640a',
          primary: '#986f0b',
          tint10: '#a47d1e',
          tint20: '#b18c34',
          tint30: '#c1a256',
          tint40: '#e0cea2',
          tint50: '#efe4cb',
          tint60: '#fbf8f2',
        },
        brown = {
          shade50: '#170e07',
          shade40: '#2b1a0e',
          shade30: '#50301a',
          shade20: '#6c4123',
          shade10: '#804d29',
          primary: '#8e562e',
          tint10: '#9c663f',
          tint20: '#a97652',
          tint30: '#bb8f6f',
          tint40: '#ddc3b0',
          tint50: '#edded3',
          tint60: '#faf7f4',
        },
        forest = {
          shade50: '#0c1501',
          shade40: '#162702',
          shade30: '#294903',
          shade20: '#376304',
          shade10: '#427505',
          primary: '#498205',
          tint10: '#599116',
          tint20: '#6ba02b',
          tint30: '#85b44c',
          tint40: '#bdd99b',
          tint50: '#dbebc7',
          tint60: '#f6faf0',
        },
        seafoam = {
          shade50: '#002111',
          shade40: '#003d20',
          shade30: '#00723b',
          shade20: '#009b51',
          shade10: '#00b85f',
          primary: '#00cc6a',
          tint10: '#19d279',
          tint20: '#34d889',
          tint30: '#5ae0a0',
          tint40: '#a8f0cd',
          tint50: '#cff7e4',
          tint60: '#f3fdf8',
        },
        lightGreen = {
          shade50: '#031a02',
          shade40: '#063004',
          shade30: '#0b5a08',
          shade20: '#0e7a0b',
          shade10: '#11910d',
          primary: '#13a10e',
          tint10: '#27ac22',
          tint20: '#3db838',
          tint30: '#5ec75a',
          tint40: '#a7e3a5',
          tint50: '#cef0cd',
          tint60: '#f2fbf2',
        },
        green = {
          shade50: '#031403',
          shade40: '#052505',
          shade30: '#094509',
          shade20: '#0c5e0c',
          shade10: '#0e700e',
          primary: '#107c10',
          tint10: '#218c21',
          tint20: '#359b35',
          tint30: '#54b054',
          tint40: '#9fd89f',
          tint50: '#c9eac9',
          tint60: '#f1faf1',
        },
        darkGreen = {
          shade50: '#021102',
          shade40: '#032003',
          shade30: '#063b06',
          shade20: '#085108',
          shade10: '#0a5f0a',
          primary: '#0b6a0b',
          tint10: '#1a7c1a',
          tint20: '#2d8e2d',
          tint30: '#4da64d',
          tint40: '#9ad29a',
          tint50: '#c6e7c6',
          tint60: '#f0f9f0',
        },
        lightTeal = {
          shade50: '#001d1f',
          shade40: '#00373a',
          shade30: '#00666d',
          shade20: '#008b94',
          shade10: '#00a5af',
          primary: '#00b7c3',
          tint10: '#18bfca',
          tint20: '#32c8d1',
          tint30: '#58d3db',
          tint40: '#a6e9ed',
          tint50: '#cef3f5',
          tint60: '#f2fcfd',
        },
        teal = {
          shade50: '#001516',
          shade40: '#012728',
          shade30: '#02494c',
          shade20: '#026467',
          shade10: '#037679',
          primary: '#038387',
          tint10: '#159195',
          tint20: '#2aa0a4',
          tint30: '#4cb4b7',
          tint40: '#9bd9db',
          tint50: '#c7ebec',
          tint60: '#f0fafa',
        },
        steel = {
          shade50: '#000f12',
          shade40: '#001b22',
          shade30: '#00333f',
          shade20: '#004555',
          shade10: '#005265',
          primary: '#005b70',
          tint10: '#0f6c81',
          tint20: '#237d92',
          tint30: '#4496a9',
          tint40: '#94c8d4',
          tint50: '#c3e1e8',
          tint60: '#eff7f9',
        },
        blue = {
          shade50: '#001322',
          shade40: '#002440',
          shade30: '#004377',
          shade20: '#005ba1',
          shade10: '#006cbf',
          primary: '#0078d4',
          tint10: '#1a86d9',
          tint20: '#3595de',
          tint30: '#5caae5',
          tint40: '#a9d3f2',
          tint50: '#d0e7f8',
          tint60: '#f3f9fd',
        },
        royalBlue = {
          shade50: '#000c16',
          shade40: '#00172a',
          shade30: '#002c4e',
          shade20: '#003b6a',
          shade10: '#00467e',
          primary: '#004e8c',
          tint10: '#125e9a',
          tint20: '#286fa8',
          tint30: '#4a89ba',
          tint40: '#9abfdc',
          tint50: '#c7dced',
          tint60: '#f0f6fa',
        },
        cornflower = {
          shade50: '#0d1126',
          shade40: '#182047',
          shade30: '#2c3c85',
          shade20: '#3c51b4',
          shade10: '#4760d5',
          primary: '#4f6bed',
          tint10: '#637cef',
          tint20: '#778df1',
          tint30: '#93a4f4',
          tint40: '#c8d1fa',
          tint50: '#e1e6fc',
          tint60: '#f7f9fe',
        },
        navy = {
          shade50: '#00061d',
          shade40: '#000c36',
          shade30: '#001665',
          shade20: '#001e89',
          shade10: '#0023a2',
          primary: '#0027b4',
          tint10: '#173bbd',
          tint20: '#3050c6',
          tint30: '#546fd2',
          tint40: '#a3b2e8',
          tint50: '#ccd5f3',
          tint60: '#f2f4fc',
        },
        lavender = {
          shade50: '#120f25',
          shade40: '#221d46',
          shade30: '#3f3682',
          shade20: '#5649b0',
          shade10: '#6656d1',
          primary: '#7160e8',
          tint10: '#8172eb',
          tint20: '#9184ee',
          tint30: '#a79cf1',
          tint40: '#d2ccf8',
          tint50: '#e7e4fb',
          tint60: '#f9f8fe',
        },
        purple = {
          shade50: '#0f0717',
          shade40: '#1c0e2b',
          shade30: '#341a51',
          shade20: '#46236e',
          shade10: '#532982',
          primary: '#5c2e91',
          tint10: '#6b3f9e',
          tint20: '#7c52ab',
          tint30: '#9470bd',
          tint40: '#c6b1de',
          tint50: '#e0d3ed',
          tint60: '#f7f4fb',
        },
        grape = {
          shade50: '#160418',
          shade40: '#29072e',
          shade30: '#4c0d55',
          shade20: '#671174',
          shade10: '#7a1589',
          primary: '#881798',
          tint10: '#952aa4',
          tint20: '#a33fb1',
          tint30: '#b55fc1',
          tint40: '#d9a7e0',
          tint50: '#eaceef',
          tint60: '#faf2fb',
        },
        berry = {
          shade50: '#1f091d',
          shade40: '#3a1136',
          shade30: '#6d2064',
          shade20: '#932b88',
          shade10: '#af33a1',
          primary: '#c239b3',
          tint10: '#c94cbc',
          tint20: '#d161c4',
          tint30: '#da7ed0',
          tint40: '#edbbe7',
          tint50: '#f5daf2',
          tint60: '#fdf5fc',
        },
        lilac = {
          shade50: '#1c0b1f',
          shade40: '#35153a',
          shade30: '#63276d',
          shade20: '#863593',
          shade10: '#9f3faf',
          primary: '#b146c2',
          tint10: '#ba58c9',
          tint20: '#c36bd1',
          tint30: '#cf87da',
          tint40: '#e6bfed',
          tint50: '#f2dcf5',
          tint60: '#fcf6fd',
        },
        pink = {
          shade50: '#24091b',
          shade40: '#441232',
          shade30: '#80215d',
          shade20: '#ad2d7e',
          shade10: '#cd3595',
          primary: '#e43ba6',
          tint10: '#e750b0',
          tint20: '#ea66ba',
          tint30: '#ef85c8',
          tint40: '#f7c0e3',
          tint50: '#fbddf0',
          tint60: '#fef6fb',
        },
        magenta = {
          shade50: '#1f0013',
          shade40: '#390024',
          shade30: '#6b0043',
          shade20: '#91005a',
          shade10: '#ac006b',
          primary: '#bf0077',
          tint10: '#c71885',
          tint20: '#ce3293',
          tint30: '#d957a8',
          tint40: '#eca5d1',
          tint50: '#f5cee6',
          tint60: '#fcf2f9',
        },
        plum = {
          shade50: '#13000c',
          shade40: '#240017',
          shade30: '#43002b',
          shade20: '#5a003b',
          shade10: '#6b0045',
          primary: '#77004d',
          tint10: '#87105d',
          tint20: '#98246f',
          tint30: '#ad4589',
          tint40: '#d696c0',
          tint50: '#e9c4dc',
          tint60: '#faf0f6',
        },
        beige = {
          shade50: '#141313',
          shade40: '#252323',
          shade30: '#444241',
          shade20: '#5d5958',
          shade10: '#6e6968',
          primary: '#7a7574',
          tint10: '#8a8584',
          tint20: '#9a9594',
          tint30: '#afabaa',
          tint40: '#d7d4d4',
          tint50: '#eae8e8',
          tint60: '#faf9f9',
        },
        mink = {
          shade50: '#0f0e0e',
          shade40: '#1c1b1a',
          shade30: '#343231',
          shade20: '#474443',
          shade10: '#54514f',
          primary: '#5d5a58',
          tint10: '#706d6b',
          tint20: '#84817e',
          tint30: '#9e9b99',
          tint40: '#cecccb',
          tint50: '#e5e4e3',
          tint60: '#f8f8f8',
        },
        platinum = {
          shade50: '#111314',
          shade40: '#1f2426',
          shade30: '#3b4447',
          shade20: '#505c60',
          shade10: '#5f6d71',
          primary: '#69797e',
          tint10: '#79898d',
          tint20: '#89989d',
          tint30: '#a0adb2',
          tint40: '#cdd6d8',
          tint50: '#e4e9ea',
          tint60: '#f8f9fa',
        },
        colors_anchor = {
          shade50: '#090a0b',
          shade40: '#111315',
          shade30: '#202427',
          shade20: '#2b3135',
          shade10: '#333a3f',
          primary: '#394146',
          tint10: '#4d565c',
          tint20: '#626c72',
          tint30: '#808a90',
          tint40: '#bcc3c7',
          tint50: '#dbdfe1',
          tint60: '#f6f7f8',
        },
        statusSharedColors = {
          red: red,
          green: green,
          darkOrange: darkOrange,
          yellow: yellow,
          berry: berry,
          lightGreen: lightGreen,
          marigold: marigold,
        },
        personaSharedColors = {
          darkRed: darkRed,
          cranberry: cranberry,
          pumpkin: pumpkin,
          peach: peach,
          gold: gold,
          brass: brass,
          brown: brown,
          forest: forest,
          seafoam: seafoam,
          darkGreen: darkGreen,
          lightTeal: lightTeal,
          teal: teal,
          steel: steel,
          blue: blue,
          royalBlue: royalBlue,
          cornflower: cornflower,
          navy: navy,
          lavender: lavender,
          purple: purple,
          grape: grape,
          lilac: lilac,
          pink: pink,
          magenta: magenta,
          plum: plum,
          beige: beige,
          mink: mink,
          platinum: platinum,
          anchor: colors_anchor,
        },
        statusSharedColorNames = ['red', 'green', 'darkOrange', 'yellow', 'berry', 'lightGreen', 'marigold'],
        personaSharedColorNames = [
          'darkRed',
          'cranberry',
          'pumpkin',
          'peach',
          'gold',
          'brass',
          'brown',
          'forest',
          'seafoam',
          'darkGreen',
          'lightTeal',
          'teal',
          'steel',
          'blue',
          'royalBlue',
          'cornflower',
          'navy',
          'lavender',
          'purple',
          'grape',
          'lilac',
          'pink',
          'magenta',
          'plum',
          'beige',
          'mink',
          'platinum',
          'anchor',
        ],
        statusColorPaletteTokens = statusSharedColorNames.reduce((acc, sharedColor) => {
          let color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1),
            sharedColorTokens = {
              [`colorPalette${color}Background1`]: statusSharedColors[sharedColor].tint60,
              [`colorPalette${color}Background2`]: statusSharedColors[sharedColor].tint40,
              [`colorPalette${color}Background3`]: statusSharedColors[sharedColor].primary,
              [`colorPalette${color}Foreground1`]: statusSharedColors[sharedColor].shade10,
              [`colorPalette${color}Foreground2`]: statusSharedColors[sharedColor].shade30,
              [`colorPalette${color}Foreground3`]: statusSharedColors[sharedColor].primary,
              [`colorPalette${color}BorderActive`]: statusSharedColors[sharedColor].primary,
              [`colorPalette${color}Border1`]: statusSharedColors[sharedColor].tint40,
              [`colorPalette${color}Border2`]: statusSharedColors[sharedColor].primary,
            };
          return Object.assign(acc, sharedColorTokens);
        }, {});
      (statusColorPaletteTokens.colorPaletteYellowForeground1 = statusSharedColors.yellow.shade30),
        (statusColorPaletteTokens.colorPaletteRedForegroundInverted = statusSharedColors.red.tint20),
        (statusColorPaletteTokens.colorPaletteGreenForegroundInverted = statusSharedColors.green.tint20),
        (statusColorPaletteTokens.colorPaletteYellowForegroundInverted = statusSharedColors.yellow.tint40);
      let personaColorPaletteTokens = personaSharedColorNames.reduce((acc, sharedColor) => {
          let color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1),
            sharedColorTokens = {
              [`colorPalette${color}Background2`]: personaSharedColors[sharedColor].tint40,
              [`colorPalette${color}Foreground2`]: personaSharedColors[sharedColor].shade30,
              [`colorPalette${color}BorderActive`]: personaSharedColors[sharedColor].primary,
            };
          return Object.assign(acc, sharedColorTokens);
        }, {}),
        colorPaletteTokens = { ...statusColorPaletteTokens, ...personaColorPaletteTokens },
        generateColorTokens = brand => ({
          colorNeutralForeground1: grey[14],
          colorNeutralForeground1Hover: grey[14],
          colorNeutralForeground1Pressed: grey[14],
          colorNeutralForeground1Selected: grey[14],
          colorNeutralForeground2: grey[26],
          colorNeutralForeground2Hover: grey[14],
          colorNeutralForeground2Pressed: grey[14],
          colorNeutralForeground2Selected: grey[14],
          colorNeutralForeground2BrandHover: brand[80],
          colorNeutralForeground2BrandPressed: brand[70],
          colorNeutralForeground2BrandSelected: brand[80],
          colorNeutralForeground3: grey[38],
          colorNeutralForeground3Hover: grey[26],
          colorNeutralForeground3Pressed: grey[26],
          colorNeutralForeground3Selected: grey[26],
          colorNeutralForeground3BrandHover: brand[80],
          colorNeutralForeground3BrandPressed: brand[70],
          colorNeutralForeground3BrandSelected: brand[80],
          colorNeutralForeground4: grey[44],
          colorNeutralForegroundDisabled: grey[74],
          colorNeutralForegroundInvertedDisabled: whiteAlpha[40],
          colorBrandForegroundLink: brand[70],
          colorBrandForegroundLinkHover: brand[60],
          colorBrandForegroundLinkPressed: brand[40],
          colorBrandForegroundLinkSelected: brand[70],
          colorNeutralForeground2Link: grey[26],
          colorNeutralForeground2LinkHover: grey[14],
          colorNeutralForeground2LinkPressed: grey[14],
          colorNeutralForeground2LinkSelected: grey[14],
          colorCompoundBrandForeground1: brand[80],
          colorCompoundBrandForeground1Hover: brand[70],
          colorCompoundBrandForeground1Pressed: brand[60],
          colorBrandForeground1: brand[80],
          colorBrandForeground2: brand[70],
          colorNeutralForeground1Static: grey[14],
          colorNeutralForegroundStaticInverted: white,
          colorNeutralForegroundInverted: white,
          colorNeutralForegroundInvertedHover: white,
          colorNeutralForegroundInvertedPressed: white,
          colorNeutralForegroundInvertedSelected: white,
          colorNeutralForegroundInverted2: white,
          colorNeutralForegroundOnBrand: white,
          colorNeutralForegroundInvertedLink: white,
          colorNeutralForegroundInvertedLinkHover: white,
          colorNeutralForegroundInvertedLinkPressed: white,
          colorNeutralForegroundInvertedLinkSelected: white,
          colorBrandForegroundInverted: brand[100],
          colorBrandForegroundInvertedHover: brand[110],
          colorBrandForegroundInvertedPressed: brand[100],
          colorBrandForegroundOnLight: brand[80],
          colorBrandForegroundOnLightHover: brand[70],
          colorBrandForegroundOnLightPressed: brand[50],
          colorBrandForegroundOnLightSelected: brand[60],
          colorNeutralBackground1: white,
          colorNeutralBackground1Hover: grey[96],
          colorNeutralBackground1Pressed: grey[88],
          colorNeutralBackground1Selected: grey[92],
          colorNeutralBackground2: grey[98],
          colorNeutralBackground2Hover: grey[94],
          colorNeutralBackground2Pressed: grey[86],
          colorNeutralBackground2Selected: grey[90],
          colorNeutralBackground3: grey[96],
          colorNeutralBackground3Hover: grey[92],
          colorNeutralBackground3Pressed: grey[84],
          colorNeutralBackground3Selected: grey[88],
          colorNeutralBackground4: grey[94],
          colorNeutralBackground4Hover: grey[98],
          colorNeutralBackground4Pressed: grey[96],
          colorNeutralBackground4Selected: white,
          colorNeutralBackground5: grey[92],
          colorNeutralBackground5Hover: grey[96],
          colorNeutralBackground5Pressed: grey[94],
          colorNeutralBackground5Selected: grey[98],
          colorNeutralBackground6: grey[90],
          colorNeutralBackgroundInverted: grey[16],
          colorNeutralBackgroundStatic: grey[20],
          colorSubtleBackground: 'transparent',
          colorSubtleBackgroundHover: grey[96],
          colorSubtleBackgroundPressed: grey[88],
          colorSubtleBackgroundSelected: grey[92],
          colorSubtleBackgroundLightAlphaHover: whiteAlpha[70],
          colorSubtleBackgroundLightAlphaPressed: whiteAlpha[50],
          colorSubtleBackgroundLightAlphaSelected: 'transparent',
          colorSubtleBackgroundInverted: 'transparent',
          colorSubtleBackgroundInvertedHover: blackAlpha[10],
          colorSubtleBackgroundInvertedPressed: blackAlpha[30],
          colorSubtleBackgroundInvertedSelected: blackAlpha[20],
          colorTransparentBackground: 'transparent',
          colorTransparentBackgroundHover: 'transparent',
          colorTransparentBackgroundPressed: 'transparent',
          colorTransparentBackgroundSelected: 'transparent',
          colorNeutralBackgroundDisabled: grey[94],
          colorNeutralBackgroundInvertedDisabled: whiteAlpha[10],
          colorNeutralStencil1: grey[90],
          colorNeutralStencil2: grey[98],
          colorNeutralStencil1Alpha: blackAlpha[10],
          colorNeutralStencil2Alpha: blackAlpha[5],
          colorBackgroundOverlay: blackAlpha[40],
          colorScrollbarOverlay: blackAlpha[50],
          colorBrandBackground: brand[80],
          colorBrandBackgroundHover: brand[70],
          colorBrandBackgroundPressed: brand[40],
          colorBrandBackgroundSelected: brand[60],
          colorCompoundBrandBackground: brand[80],
          colorCompoundBrandBackgroundHover: brand[70],
          colorCompoundBrandBackgroundPressed: brand[60],
          colorBrandBackgroundStatic: brand[80],
          colorBrandBackground2: brand[160],
          colorBrandBackgroundInverted: white,
          colorBrandBackgroundInvertedHover: brand[160],
          colorBrandBackgroundInvertedPressed: brand[140],
          colorBrandBackgroundInvertedSelected: brand[150],
          colorNeutralStrokeAccessible: grey[38],
          colorNeutralStrokeAccessibleHover: grey[34],
          colorNeutralStrokeAccessiblePressed: grey[30],
          colorNeutralStrokeAccessibleSelected: brand[80],
          colorNeutralStroke1: grey[82],
          colorNeutralStroke1Hover: grey[78],
          colorNeutralStroke1Pressed: grey[70],
          colorNeutralStroke1Selected: grey[74],
          colorNeutralStroke2: grey[88],
          colorNeutralStroke3: grey[94],
          colorNeutralStrokeOnBrand: white,
          colorNeutralStrokeOnBrand2: white,
          colorNeutralStrokeOnBrand2Hover: white,
          colorNeutralStrokeOnBrand2Pressed: white,
          colorNeutralStrokeOnBrand2Selected: white,
          colorBrandStroke1: brand[80],
          colorBrandStroke2: brand[140],
          colorCompoundBrandStroke: brand[80],
          colorCompoundBrandStrokeHover: brand[70],
          colorCompoundBrandStrokePressed: brand[60],
          colorNeutralStrokeDisabled: grey[88],
          colorNeutralStrokeInvertedDisabled: whiteAlpha[40],
          colorTransparentStroke: 'transparent',
          colorTransparentStrokeInteractive: 'transparent',
          colorTransparentStrokeDisabled: 'transparent',
          colorStrokeFocus1: white,
          colorStrokeFocus2: black,
          colorNeutralShadowAmbient: 'rgba(0,0,0,0.12)',
          colorNeutralShadowKey: 'rgba(0,0,0,0.14)',
          colorNeutralShadowAmbientLighter: 'rgba(0,0,0,0.06)',
          colorNeutralShadowKeyLighter: 'rgba(0,0,0,0.07)',
          colorNeutralShadowAmbientDarker: 'rgba(0,0,0,0.20)',
          colorNeutralShadowKeyDarker: 'rgba(0,0,0,0.24)',
          colorBrandShadowAmbient: 'rgba(0,0,0,0.30)',
          colorBrandShadowKey: 'rgba(0,0,0,0.25)',
        }),
        borderRadius = {
          borderRadiusNone: '0',
          borderRadiusSmall: '2px',
          borderRadiusMedium: '4px',
          borderRadiusLarge: '6px',
          borderRadiusXLarge: '8px',
          borderRadiusCircular: '10000px',
        },
        fontSizes = {
          fontSizeBase100: '10px',
          fontSizeBase200: '12px',
          fontSizeBase300: '14px',
          fontSizeBase400: '16px',
          fontSizeBase500: '20px',
          fontSizeBase600: '24px',
          fontSizeHero700: '28px',
          fontSizeHero800: '32px',
          fontSizeHero900: '40px',
          fontSizeHero1000: '68px',
        },
        lineHeights = {
          lineHeightBase100: '14px',
          lineHeightBase200: '16px',
          lineHeightBase300: '20px',
          lineHeightBase400: '22px',
          lineHeightBase500: '28px',
          lineHeightBase600: '32px',
          lineHeightHero700: '36px',
          lineHeightHero800: '40px',
          lineHeightHero900: '52px',
          lineHeightHero1000: '92px',
        },
        fontWeights = { fontWeightRegular: 400, fontWeightMedium: 500, fontWeightSemibold: 600, fontWeightBold: 700 },
        fontFamilies = {
          fontFamilyBase:
            "'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif",
          fontFamilyMonospace: "Consolas, 'Courier New', Courier, monospace",
          fontFamilyNumeric:
            "Bahnschrift, 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif",
        },
        strokeWidths = {
          strokeWidthThin: '1px',
          strokeWidthThick: '2px',
          strokeWidthThicker: '3px',
          strokeWidthThickest: '4px',
        };
      function createShadowTokens(ambientColor, keyColor, tokenSuffix = '') {
        return {
          [`shadow2${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 1px 2px ${keyColor}`,
          [`shadow4${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 2px 4px ${keyColor}`,
          [`shadow8${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 4px 8px ${keyColor}`,
          [`shadow16${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 8px 16px ${keyColor}`,
          [`shadow28${tokenSuffix}`]: `0 0 8px ${ambientColor}, 0 14px 28px ${keyColor}`,
          [`shadow64${tokenSuffix}`]: `0 0 8px ${ambientColor}, 0 32px 64px ${keyColor}`,
        };
      }
      let durations = {
          durationUltraFast: '50ms',
          durationFaster: '100ms',
          durationFast: '150ms',
          durationNormal: '200ms',
          durationSlow: '300ms',
          durationSlower: '400ms',
          durationUltraSlow: '500ms',
        },
        curves = {
          curveAccelerateMax: 'cubic-bezier(1,0,1,1)',
          curveAccelerateMid: 'cubic-bezier(0.7,0,1,0.5)',
          curveAccelerateMin: 'cubic-bezier(0.8,0,1,1)',
          curveDecelerateMax: 'cubic-bezier(0,0,0,1)',
          curveDecelerateMid: 'cubic-bezier(0.1,0.9,0.2,1)',
          curveDecelerateMin: 'cubic-bezier(0.33,0,0.1,1)',
          curveEasyEaseMax: 'cubic-bezier(0.8,0,0.1,1)',
          curveEasyEase: 'cubic-bezier(0.33,0,0.67,1)',
          curveLinear: 'cubic-bezier(0,0,1,1)',
        },
        spacings = {
          none: '0',
          xxs: '2px',
          xs: '4px',
          sNudge: '6px',
          s: '8px',
          mNudge: '10px',
          m: '12px',
          l: '16px',
          xl: '20px',
          xxl: '24px',
          xxxl: '32px',
        },
        horizontalSpacings = {
          spacingHorizontalNone: spacings.none,
          spacingHorizontalXXS: spacings.xxs,
          spacingHorizontalXS: spacings.xs,
          spacingHorizontalSNudge: spacings.sNudge,
          spacingHorizontalS: spacings.s,
          spacingHorizontalMNudge: spacings.mNudge,
          spacingHorizontalM: spacings.m,
          spacingHorizontalL: spacings.l,
          spacingHorizontalXL: spacings.xl,
          spacingHorizontalXXL: spacings.xxl,
          spacingHorizontalXXXL: spacings.xxxl,
        },
        verticalSpacings = {
          spacingVerticalNone: spacings.none,
          spacingVerticalXXS: spacings.xxs,
          spacingVerticalXS: spacings.xs,
          spacingVerticalSNudge: spacings.sNudge,
          spacingVerticalS: spacings.s,
          spacingVerticalMNudge: spacings.mNudge,
          spacingVerticalM: spacings.m,
          spacingVerticalL: spacings.l,
          spacingVerticalXL: spacings.xl,
          spacingVerticalXXL: spacings.xxl,
          spacingVerticalXXXL: spacings.xxxl,
        },
        createLightTheme = brand => {
          let colorTokens = generateColorTokens(brand);
          return {
            ...borderRadius,
            ...fontSizes,
            ...lineHeights,
            ...fontFamilies,
            ...fontWeights,
            ...strokeWidths,
            ...horizontalSpacings,
            ...verticalSpacings,
            ...durations,
            ...curves,
            ...colorTokens,
            ...colorPaletteTokens,
            ...createShadowTokens(colorTokens.colorNeutralShadowAmbient, colorTokens.colorNeutralShadowKey),
            ...createShadowTokens(colorTokens.colorBrandShadowAmbient, colorTokens.colorBrandShadowKey, 'Brand'),
          };
        },
        brandWeb = {
          10: '#061724',
          20: '#082338',
          30: '#0a2e4a',
          40: '#0c3b5e',
          50: '#0e4775',
          60: '#0f548c',
          70: '#115ea3',
          80: '#0f6cbd',
          90: '#2886de',
          100: '#479ef5',
          110: '#62abf5',
          120: '#77b7f7',
          130: '#96c6fa',
          140: '#b4d6fa',
          150: '#cfe4fa',
          160: '#ebf3fc',
        },
        brandTeams = {
          10: '#2b2b40',
          20: '#2f2f4a',
          30: '#333357',
          40: '#383966',
          50: '#3d3e78',
          60: '#444791',
          70: '#4f52b2',
          80: '#5b5fc7',
          90: '#7579eb',
          100: '#7f85f5',
          110: '#9299f7',
          120: '#aab1fa',
          130: '#b6bcfa',
          140: '#c5cbfa',
          150: '#dce0fa',
          160: '#e8ebfa',
        },
        webLightTheme = createLightTheme(brandWeb),
        darkColorPalette_statusColorPaletteTokens = statusSharedColorNames.reduce((acc, sharedColor) => {
          let color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1),
            sharedColorTokens = {
              [`colorPalette${color}Background1`]: statusSharedColors[sharedColor].shade40,
              [`colorPalette${color}Background2`]: statusSharedColors[sharedColor].shade30,
              [`colorPalette${color}Background3`]: statusSharedColors[sharedColor].primary,
              [`colorPalette${color}Foreground1`]: statusSharedColors[sharedColor].tint30,
              [`colorPalette${color}Foreground2`]: statusSharedColors[sharedColor].tint40,
              [`colorPalette${color}Foreground3`]: statusSharedColors[sharedColor].tint20,
              [`colorPalette${color}BorderActive`]: statusSharedColors[sharedColor].tint30,
              [`colorPalette${color}Border1`]: statusSharedColors[sharedColor].primary,
              [`colorPalette${color}Border2`]: statusSharedColors[sharedColor].tint20,
            };
          return Object.assign(acc, sharedColorTokens);
        }, {});
      (darkColorPalette_statusColorPaletteTokens.colorPaletteRedForeground3 = statusSharedColors.red.tint30),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteRedBorder2 = statusSharedColors.red.tint30),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteGreenForeground3 = statusSharedColors.green.tint40),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteGreenBorder2 = statusSharedColors.green.tint40),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteDarkOrangeForeground3 =
          statusSharedColors.darkOrange.tint30),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteDarkOrangeBorder2 =
          statusSharedColors.darkOrange.tint30),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteRedForegroundInverted = statusSharedColors.red.primary),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteGreenForegroundInverted =
          statusSharedColors.green.primary),
        (darkColorPalette_statusColorPaletteTokens.colorPaletteYellowForegroundInverted =
          statusSharedColors.yellow.shade30);
      let darkColorPalette_personaColorPaletteTokens = personaSharedColorNames.reduce((acc, sharedColor) => {
        let color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1),
          sharedColorTokens = {
            [`colorPalette${color}Background2`]: personaSharedColors[sharedColor].shade30,
            [`colorPalette${color}Foreground2`]: personaSharedColors[sharedColor].tint40,
            [`colorPalette${color}BorderActive`]: personaSharedColors[sharedColor].tint30,
          };
        return Object.assign(acc, sharedColorTokens);
      }, {});
      (darkColorPalette_personaColorPaletteTokens.colorPaletteDarkRedBackground2 = personaSharedColors.darkRed.shade20),
        (darkColorPalette_personaColorPaletteTokens.colorPalettePlumBackground2 = personaSharedColors.plum.shade20);
      let darkColorPalette_colorPaletteTokens = {
          ...darkColorPalette_statusColorPaletteTokens,
          ...darkColorPalette_personaColorPaletteTokens,
        },
        darkColor_generateColorTokens = brand => ({
          colorNeutralForeground1: white,
          colorNeutralForeground1Hover: white,
          colorNeutralForeground1Pressed: white,
          colorNeutralForeground1Selected: white,
          colorNeutralForeground2: grey[84],
          colorNeutralForeground2Hover: white,
          colorNeutralForeground2Pressed: white,
          colorNeutralForeground2Selected: white,
          colorNeutralForeground2BrandHover: brand[100],
          colorNeutralForeground2BrandPressed: brand[90],
          colorNeutralForeground2BrandSelected: brand[100],
          colorNeutralForeground3: grey[68],
          colorNeutralForeground3Hover: grey[84],
          colorNeutralForeground3Pressed: grey[84],
          colorNeutralForeground3Selected: grey[84],
          colorNeutralForeground3BrandHover: brand[100],
          colorNeutralForeground3BrandPressed: brand[90],
          colorNeutralForeground3BrandSelected: brand[100],
          colorNeutralForeground4: grey[60],
          colorNeutralForegroundDisabled: grey[36],
          colorNeutralForegroundInvertedDisabled: whiteAlpha[40],
          colorBrandForegroundLink: brand[100],
          colorBrandForegroundLinkHover: brand[110],
          colorBrandForegroundLinkPressed: brand[90],
          colorBrandForegroundLinkSelected: brand[100],
          colorNeutralForeground2Link: grey[84],
          colorNeutralForeground2LinkHover: white,
          colorNeutralForeground2LinkPressed: white,
          colorNeutralForeground2LinkSelected: white,
          colorCompoundBrandForeground1: brand[100],
          colorCompoundBrandForeground1Hover: brand[110],
          colorCompoundBrandForeground1Pressed: brand[90],
          colorBrandForeground1: brand[100],
          colorBrandForeground2: brand[110],
          colorNeutralForeground1Static: grey[14],
          colorNeutralForegroundStaticInverted: white,
          colorNeutralForegroundInverted: grey[14],
          colorNeutralForegroundInvertedHover: grey[14],
          colorNeutralForegroundInvertedPressed: grey[14],
          colorNeutralForegroundInvertedSelected: grey[14],
          colorNeutralForegroundInverted2: grey[14],
          colorNeutralForegroundOnBrand: white,
          colorNeutralForegroundInvertedLink: white,
          colorNeutralForegroundInvertedLinkHover: white,
          colorNeutralForegroundInvertedLinkPressed: white,
          colorNeutralForegroundInvertedLinkSelected: white,
          colorBrandForegroundInverted: brand[80],
          colorBrandForegroundInvertedHover: brand[70],
          colorBrandForegroundInvertedPressed: brand[60],
          colorBrandForegroundOnLight: brand[80],
          colorBrandForegroundOnLightHover: brand[70],
          colorBrandForegroundOnLightPressed: brand[50],
          colorBrandForegroundOnLightSelected: brand[60],
          colorNeutralBackground1: grey[16],
          colorNeutralBackground1Hover: grey[24],
          colorNeutralBackground1Pressed: grey[12],
          colorNeutralBackground1Selected: grey[22],
          colorNeutralBackground2: grey[12],
          colorNeutralBackground2Hover: grey[20],
          colorNeutralBackground2Pressed: grey[8],
          colorNeutralBackground2Selected: grey[18],
          colorNeutralBackground3: grey[8],
          colorNeutralBackground3Hover: grey[16],
          colorNeutralBackground3Pressed: grey[4],
          colorNeutralBackground3Selected: grey[14],
          colorNeutralBackground4: grey[4],
          colorNeutralBackground4Hover: grey[12],
          colorNeutralBackground4Pressed: black,
          colorNeutralBackground4Selected: grey[10],
          colorNeutralBackground5: black,
          colorNeutralBackground5Hover: grey[8],
          colorNeutralBackground5Pressed: grey[2],
          colorNeutralBackground5Selected: grey[6],
          colorNeutralBackground6: grey[20],
          colorNeutralBackgroundInverted: white,
          colorNeutralBackgroundStatic: grey[24],
          colorSubtleBackground: 'transparent',
          colorSubtleBackgroundHover: grey[22],
          colorSubtleBackgroundPressed: grey[18],
          colorSubtleBackgroundSelected: grey[20],
          colorSubtleBackgroundLightAlphaHover: grey14Alpha[80],
          colorSubtleBackgroundLightAlphaPressed: grey14Alpha[50],
          colorSubtleBackgroundLightAlphaSelected: 'transparent',
          colorSubtleBackgroundInverted: 'transparent',
          colorSubtleBackgroundInvertedHover: blackAlpha[10],
          colorSubtleBackgroundInvertedPressed: blackAlpha[30],
          colorSubtleBackgroundInvertedSelected: blackAlpha[20],
          colorTransparentBackground: 'transparent',
          colorTransparentBackgroundHover: 'transparent',
          colorTransparentBackgroundPressed: 'transparent',
          colorTransparentBackgroundSelected: 'transparent',
          colorNeutralBackgroundDisabled: grey[8],
          colorNeutralBackgroundInvertedDisabled: whiteAlpha[10],
          colorNeutralStencil1: grey[34],
          colorNeutralStencil2: grey[20],
          colorNeutralStencil1Alpha: whiteAlpha[10],
          colorNeutralStencil2Alpha: whiteAlpha[5],
          colorBackgroundOverlay: blackAlpha[50],
          colorScrollbarOverlay: whiteAlpha[60],
          colorBrandBackground: brand[70],
          colorBrandBackgroundHover: brand[80],
          colorBrandBackgroundPressed: brand[40],
          colorBrandBackgroundSelected: brand[60],
          colorCompoundBrandBackground: brand[100],
          colorCompoundBrandBackgroundHover: brand[110],
          colorCompoundBrandBackgroundPressed: brand[90],
          colorBrandBackgroundStatic: brand[80],
          colorBrandBackground2: brand[40],
          colorBrandBackgroundInverted: white,
          colorBrandBackgroundInvertedHover: brand[160],
          colorBrandBackgroundInvertedPressed: brand[140],
          colorBrandBackgroundInvertedSelected: brand[150],
          colorNeutralStrokeAccessible: grey[68],
          colorNeutralStrokeAccessibleHover: grey[74],
          colorNeutralStrokeAccessiblePressed: grey[70],
          colorNeutralStrokeAccessibleSelected: brand[100],
          colorNeutralStroke1: grey[40],
          colorNeutralStroke1Hover: grey[46],
          colorNeutralStroke1Pressed: grey[42],
          colorNeutralStroke1Selected: grey[44],
          colorNeutralStroke2: grey[32],
          colorNeutralStroke3: grey[24],
          colorNeutralStrokeOnBrand: grey[16],
          colorNeutralStrokeOnBrand2: white,
          colorNeutralStrokeOnBrand2Hover: white,
          colorNeutralStrokeOnBrand2Pressed: white,
          colorNeutralStrokeOnBrand2Selected: white,
          colorBrandStroke1: brand[100],
          colorBrandStroke2: brand[50],
          colorCompoundBrandStroke: brand[100],
          colorCompoundBrandStrokeHover: brand[110],
          colorCompoundBrandStrokePressed: brand[90],
          colorNeutralStrokeDisabled: grey[26],
          colorNeutralStrokeInvertedDisabled: whiteAlpha[40],
          colorTransparentStroke: 'transparent',
          colorTransparentStrokeInteractive: 'transparent',
          colorTransparentStrokeDisabled: 'transparent',
          colorStrokeFocus1: black,
          colorStrokeFocus2: white,
          colorNeutralShadowAmbient: 'rgba(0,0,0,0.24)',
          colorNeutralShadowKey: 'rgba(0,0,0,0.28)',
          colorNeutralShadowAmbientLighter: 'rgba(0,0,0,0.12)',
          colorNeutralShadowKeyLighter: 'rgba(0,0,0,0.14)',
          colorNeutralShadowAmbientDarker: 'rgba(0,0,0,0.40)',
          colorNeutralShadowKeyDarker: 'rgba(0,0,0,0.48)',
          colorBrandShadowAmbient: 'rgba(0,0,0,0.30)',
          colorBrandShadowKey: 'rgba(0,0,0,0.25)',
        }),
        createDarkTheme = brand => {
          let colorTokens = darkColor_generateColorTokens(brand);
          return {
            ...borderRadius,
            ...fontSizes,
            ...lineHeights,
            ...fontFamilies,
            ...fontWeights,
            ...strokeWidths,
            ...horizontalSpacings,
            ...verticalSpacings,
            ...durations,
            ...curves,
            ...colorTokens,
            ...darkColorPalette_colorPaletteTokens,
            ...createShadowTokens(colorTokens.colorNeutralShadowAmbient, colorTokens.colorNeutralShadowKey),
            ...createShadowTokens(colorTokens.colorBrandShadowAmbient, colorTokens.colorBrandShadowKey, 'Brand'),
          };
        },
        webDarkTheme = createDarkTheme(brandWeb),
        teamsLightTheme = createLightTheme(brandTeams),
        teamsDarkColor_generateColorTokens = brand => ({
          colorNeutralForeground1: white,
          colorNeutralForeground1Hover: white,
          colorNeutralForeground1Pressed: white,
          colorNeutralForeground1Selected: white,
          colorNeutralForeground2: grey[84],
          colorNeutralForeground2Hover: white,
          colorNeutralForeground2Pressed: white,
          colorNeutralForeground2Selected: white,
          colorNeutralForeground2BrandHover: brand[100],
          colorNeutralForeground2BrandPressed: brand[90],
          colorNeutralForeground2BrandSelected: brand[100],
          colorNeutralForeground3: grey[68],
          colorNeutralForeground3Hover: grey[84],
          colorNeutralForeground3Pressed: grey[84],
          colorNeutralForeground3Selected: grey[84],
          colorNeutralForeground3BrandHover: brand[100],
          colorNeutralForeground3BrandPressed: brand[90],
          colorNeutralForeground3BrandSelected: brand[100],
          colorNeutralForeground4: grey[60],
          colorNeutralForegroundDisabled: grey[36],
          colorNeutralForegroundInvertedDisabled: whiteAlpha[40],
          colorBrandForegroundLink: brand[100],
          colorBrandForegroundLinkHover: brand[110],
          colorBrandForegroundLinkPressed: brand[90],
          colorBrandForegroundLinkSelected: brand[100],
          colorNeutralForeground2Link: grey[84],
          colorNeutralForeground2LinkHover: white,
          colorNeutralForeground2LinkPressed: white,
          colorNeutralForeground2LinkSelected: white,
          colorCompoundBrandForeground1: brand[100],
          colorCompoundBrandForeground1Hover: brand[110],
          colorCompoundBrandForeground1Pressed: brand[90],
          colorBrandForeground1: brand[100],
          colorBrandForeground2: brand[120],
          colorNeutralForeground1Static: grey[14],
          colorNeutralForegroundStaticInverted: white,
          colorNeutralForegroundInverted: grey[14],
          colorNeutralForegroundInvertedHover: grey[14],
          colorNeutralForegroundInvertedPressed: grey[14],
          colorNeutralForegroundInvertedSelected: grey[14],
          colorNeutralForegroundInverted2: grey[14],
          colorNeutralForegroundOnBrand: white,
          colorNeutralForegroundInvertedLink: white,
          colorNeutralForegroundInvertedLinkHover: white,
          colorNeutralForegroundInvertedLinkPressed: white,
          colorNeutralForegroundInvertedLinkSelected: white,
          colorBrandForegroundInverted: brand[80],
          colorBrandForegroundInvertedHover: brand[70],
          colorBrandForegroundInvertedPressed: brand[60],
          colorBrandForegroundOnLight: brand[80],
          colorBrandForegroundOnLightHover: brand[70],
          colorBrandForegroundOnLightPressed: brand[50],
          colorBrandForegroundOnLightSelected: brand[60],
          colorNeutralBackground1: grey[16],
          colorNeutralBackground1Hover: grey[24],
          colorNeutralBackground1Pressed: grey[12],
          colorNeutralBackground1Selected: grey[22],
          colorNeutralBackground2: grey[14],
          colorNeutralBackground2Hover: grey[22],
          colorNeutralBackground2Pressed: grey[10],
          colorNeutralBackground2Selected: grey[20],
          colorNeutralBackground3: grey[12],
          colorNeutralBackground3Hover: grey[20],
          colorNeutralBackground3Pressed: grey[8],
          colorNeutralBackground3Selected: grey[18],
          colorNeutralBackground4: grey[8],
          colorNeutralBackground4Hover: grey[16],
          colorNeutralBackground4Pressed: grey[4],
          colorNeutralBackground4Selected: grey[14],
          colorNeutralBackground5: grey[4],
          colorNeutralBackground5Hover: grey[12],
          colorNeutralBackground5Pressed: black,
          colorNeutralBackground5Selected: grey[10],
          colorNeutralBackground6: grey[20],
          colorNeutralBackgroundInverted: white,
          colorNeutralBackgroundStatic: grey[24],
          colorSubtleBackground: 'transparent',
          colorSubtleBackgroundHover: grey[22],
          colorSubtleBackgroundPressed: grey[18],
          colorSubtleBackgroundSelected: grey[20],
          colorSubtleBackgroundLightAlphaHover: grey14Alpha[80],
          colorSubtleBackgroundLightAlphaPressed: grey14Alpha[50],
          colorSubtleBackgroundLightAlphaSelected: 'transparent',
          colorSubtleBackgroundInverted: 'transparent',
          colorSubtleBackgroundInvertedHover: blackAlpha[10],
          colorSubtleBackgroundInvertedPressed: blackAlpha[30],
          colorSubtleBackgroundInvertedSelected: blackAlpha[20],
          colorTransparentBackground: 'transparent',
          colorTransparentBackgroundHover: 'transparent',
          colorTransparentBackgroundPressed: 'transparent',
          colorTransparentBackgroundSelected: 'transparent',
          colorNeutralBackgroundDisabled: grey[8],
          colorNeutralBackgroundInvertedDisabled: whiteAlpha[10],
          colorNeutralStencil1: grey[34],
          colorNeutralStencil2: grey[20],
          colorNeutralStencil1Alpha: whiteAlpha[10],
          colorNeutralStencil2Alpha: whiteAlpha[5],
          colorBackgroundOverlay: blackAlpha[50],
          colorScrollbarOverlay: whiteAlpha[60],
          colorBrandBackground: brand[70],
          colorBrandBackgroundHover: brand[80],
          colorBrandBackgroundPressed: brand[40],
          colorBrandBackgroundSelected: brand[60],
          colorCompoundBrandBackground: brand[100],
          colorCompoundBrandBackgroundHover: brand[110],
          colorCompoundBrandBackgroundPressed: brand[90],
          colorBrandBackgroundStatic: brand[80],
          colorBrandBackground2: brand[40],
          colorBrandBackgroundInverted: white,
          colorBrandBackgroundInvertedHover: brand[160],
          colorBrandBackgroundInvertedPressed: brand[140],
          colorBrandBackgroundInvertedSelected: brand[150],
          colorNeutralStrokeAccessible: grey[68],
          colorNeutralStrokeAccessibleHover: grey[74],
          colorNeutralStrokeAccessiblePressed: grey[70],
          colorNeutralStrokeAccessibleSelected: brand[100],
          colorNeutralStroke1: grey[40],
          colorNeutralStroke1Hover: grey[46],
          colorNeutralStroke1Pressed: grey[42],
          colorNeutralStroke1Selected: grey[44],
          colorNeutralStroke2: grey[32],
          colorNeutralStroke3: grey[24],
          colorNeutralStrokeOnBrand: grey[16],
          colorNeutralStrokeOnBrand2: white,
          colorNeutralStrokeOnBrand2Hover: white,
          colorNeutralStrokeOnBrand2Pressed: white,
          colorNeutralStrokeOnBrand2Selected: white,
          colorBrandStroke1: brand[100],
          colorBrandStroke2: brand[50],
          colorCompoundBrandStroke: brand[90],
          colorCompoundBrandStrokeHover: brand[100],
          colorCompoundBrandStrokePressed: brand[80],
          colorNeutralStrokeDisabled: grey[26],
          colorNeutralStrokeInvertedDisabled: whiteAlpha[40],
          colorTransparentStroke: 'transparent',
          colorTransparentStrokeInteractive: 'transparent',
          colorTransparentStrokeDisabled: 'transparent',
          colorStrokeFocus1: black,
          colorStrokeFocus2: white,
          colorNeutralShadowAmbient: 'rgba(0,0,0,0.24)',
          colorNeutralShadowKey: 'rgba(0,0,0,0.28)',
          colorNeutralShadowAmbientLighter: 'rgba(0,0,0,0.12)',
          colorNeutralShadowKeyLighter: 'rgba(0,0,0,0.14)',
          colorNeutralShadowAmbientDarker: 'rgba(0,0,0,0.40)',
          colorNeutralShadowKeyDarker: 'rgba(0,0,0,0.48)',
          colorBrandShadowAmbient: 'rgba(0,0,0,0.30)',
          colorBrandShadowKey: 'rgba(0,0,0,0.25)',
        }),
        createTeamsDarkTheme = brand => {
          let colorTokens = teamsDarkColor_generateColorTokens(brand);
          return {
            ...borderRadius,
            ...fontSizes,
            ...lineHeights,
            ...fontFamilies,
            ...fontWeights,
            ...strokeWidths,
            ...horizontalSpacings,
            ...verticalSpacings,
            ...durations,
            ...curves,
            ...colorTokens,
            ...darkColorPalette_colorPaletteTokens,
            ...createShadowTokens(colorTokens.colorNeutralShadowAmbient, colorTokens.colorNeutralShadowKey),
            ...createShadowTokens(colorTokens.colorBrandShadowAmbient, colorTokens.colorBrandShadowKey, 'Brand'),
          };
        },
        teamsDarkTheme = createTeamsDarkTheme(brandTeams),
        highContrastColorPalette_statusColorPaletteTokens = statusSharedColorNames.reduce((acc, sharedColor) => {
          let color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1),
            sharedColorTokens = {
              [`colorPalette${color}Background1`]: hcCanvas,
              [`colorPalette${color}Background2`]: hcCanvas,
              [`colorPalette${color}Background3`]: hcCanvasText,
              [`colorPalette${color}Foreground1`]: hcCanvasText,
              [`colorPalette${color}Foreground2`]: hcCanvasText,
              [`colorPalette${color}Foreground3`]: hcCanvasText,
              [`colorPalette${color}BorderActive`]: hcHighlight,
              [`colorPalette${color}Border1`]: hcCanvasText,
              [`colorPalette${color}Border2`]: hcCanvasText,
            };
          return Object.assign(acc, sharedColorTokens);
        }, {});
      (highContrastColorPalette_statusColorPaletteTokens.colorPaletteRedForegroundInverted = hcCanvasText),
        (highContrastColorPalette_statusColorPaletteTokens.colorPaletteGreenForegroundInverted = hcCanvasText),
        (highContrastColorPalette_statusColorPaletteTokens.colorPaletteYellowForegroundInverted = hcCanvasText);
      let highContrastColorPalette_personaColorPaletteTokens = personaSharedColorNames.reduce((acc, sharedColor) => {
          let color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1),
            sharedColorTokens = {
              [`colorPalette${color}Background2`]: hcCanvas,
              [`colorPalette${color}Foreground2`]: hcCanvasText,
              [`colorPalette${color}BorderActive`]: hcHighlight,
            };
          return Object.assign(acc, sharedColorTokens);
        }, {}),
        highContrastColorPalette_colorPaletteTokens = {
          ...highContrastColorPalette_statusColorPaletteTokens,
          ...highContrastColorPalette_personaColorPaletteTokens,
        },
        highContrastColor_generateColorTokens = () => ({
          colorNeutralForeground1: hcCanvasText,
          colorNeutralForeground1Hover: hcHighlightText,
          colorNeutralForeground1Pressed: hcHighlightText,
          colorNeutralForeground1Selected: hcHighlightText,
          colorNeutralForeground2: hcCanvasText,
          colorNeutralForeground2Hover: hcHighlightText,
          colorNeutralForeground2Pressed: hcHighlightText,
          colorNeutralForeground2Selected: hcHighlightText,
          colorNeutralForeground2BrandHover: hcHighlightText,
          colorNeutralForeground2BrandPressed: hcHighlightText,
          colorNeutralForeground2BrandSelected: hcHighlightText,
          colorNeutralForeground3: hcCanvasText,
          colorNeutralForeground3Hover: hcHighlightText,
          colorNeutralForeground3Pressed: hcHighlightText,
          colorNeutralForeground3Selected: hcHighlightText,
          colorNeutralForeground3BrandHover: hcHighlightText,
          colorNeutralForeground3BrandPressed: hcHighlightText,
          colorNeutralForeground3BrandSelected: hcHighlightText,
          colorNeutralForeground4: hcCanvasText,
          colorNeutralForegroundDisabled: hcDisabled,
          colorNeutralForegroundInvertedDisabled: hcDisabled,
          colorBrandForegroundLink: hcHyperlink,
          colorBrandForegroundLinkHover: hcHyperlink,
          colorBrandForegroundLinkPressed: hcHyperlink,
          colorBrandForegroundLinkSelected: hcHyperlink,
          colorNeutralForeground2Link: hcHyperlink,
          colorNeutralForeground2LinkHover: hcHyperlink,
          colorNeutralForeground2LinkPressed: hcHyperlink,
          colorNeutralForeground2LinkSelected: hcHyperlink,
          colorCompoundBrandForeground1: hcHighlight,
          colorCompoundBrandForeground1Hover: hcHighlight,
          colorCompoundBrandForeground1Pressed: hcHighlight,
          colorBrandForeground1: hcCanvasText,
          colorBrandForeground2: hcButtonText,
          colorNeutralForeground1Static: hcCanvas,
          colorNeutralForegroundStaticInverted: hcCanvasText,
          colorNeutralForegroundInverted: hcHighlightText,
          colorNeutralForegroundInvertedHover: hcHighlightText,
          colorNeutralForegroundInvertedPressed: hcHighlightText,
          colorNeutralForegroundInvertedSelected: hcHighlightText,
          colorNeutralForegroundInverted2: hcCanvasText,
          colorNeutralForegroundOnBrand: hcButtonText,
          colorNeutralForegroundInvertedLink: hcHyperlink,
          colorNeutralForegroundInvertedLinkHover: hcHyperlink,
          colorNeutralForegroundInvertedLinkPressed: hcHyperlink,
          colorNeutralForegroundInvertedLinkSelected: hcHyperlink,
          colorBrandForegroundInverted: hcCanvasText,
          colorBrandForegroundInvertedHover: hcHighlightText,
          colorBrandForegroundInvertedPressed: hcHighlightText,
          colorBrandForegroundOnLight: hcButtonText,
          colorBrandForegroundOnLightHover: hcHighlightText,
          colorBrandForegroundOnLightPressed: hcHighlightText,
          colorBrandForegroundOnLightSelected: hcHighlightText,
          colorNeutralBackground1: hcCanvas,
          colorNeutralBackground1Hover: hcHighlight,
          colorNeutralBackground1Pressed: hcHighlight,
          colorNeutralBackground1Selected: hcHighlight,
          colorNeutralBackground2: hcCanvas,
          colorNeutralBackground2Hover: hcHighlight,
          colorNeutralBackground2Pressed: hcHighlight,
          colorNeutralBackground2Selected: hcHighlight,
          colorNeutralBackground3: hcCanvas,
          colorNeutralBackground3Hover: hcHighlight,
          colorNeutralBackground3Pressed: hcHighlight,
          colorNeutralBackground3Selected: hcHighlight,
          colorNeutralBackground4: hcCanvas,
          colorNeutralBackground4Hover: hcHighlight,
          colorNeutralBackground4Pressed: hcHighlight,
          colorNeutralBackground4Selected: hcHighlight,
          colorNeutralBackground5: hcCanvas,
          colorNeutralBackground5Hover: hcHighlight,
          colorNeutralBackground5Pressed: hcHighlight,
          colorNeutralBackground5Selected: hcHighlight,
          colorNeutralBackground6: hcCanvas,
          colorNeutralBackgroundInverted: hcCanvas,
          colorNeutralBackgroundStatic: hcCanvas,
          colorSubtleBackground: 'transparent',
          colorSubtleBackgroundHover: hcHighlight,
          colorSubtleBackgroundPressed: hcHighlight,
          colorSubtleBackgroundSelected: hcHighlight,
          colorSubtleBackgroundLightAlphaHover: hcHighlight,
          colorSubtleBackgroundLightAlphaPressed: hcHighlight,
          colorSubtleBackgroundLightAlphaSelected: hcHighlight,
          colorSubtleBackgroundInverted: 'transparent',
          colorSubtleBackgroundInvertedHover: hcHighlight,
          colorSubtleBackgroundInvertedPressed: hcHighlight,
          colorSubtleBackgroundInvertedSelected: hcHighlight,
          colorTransparentBackground: 'transparent',
          colorTransparentBackgroundHover: hcHighlight,
          colorTransparentBackgroundPressed: hcHighlight,
          colorTransparentBackgroundSelected: hcHighlight,
          colorNeutralBackgroundDisabled: hcCanvas,
          colorNeutralBackgroundInvertedDisabled: hcCanvas,
          colorNeutralStencil1: hcCanvasText,
          colorNeutralStencil2: hcCanvasText,
          colorNeutralStencil1Alpha: hcCanvasText,
          colorNeutralStencil2Alpha: hcCanvasText,
          colorBackgroundOverlay: blackAlpha[50],
          colorScrollbarOverlay: hcButtonFace,
          colorBrandBackground: hcButtonFace,
          colorBrandBackgroundHover: hcHighlight,
          colorBrandBackgroundPressed: hcHighlight,
          colorBrandBackgroundSelected: hcHighlight,
          colorCompoundBrandBackground: hcHighlight,
          colorCompoundBrandBackgroundHover: hcHighlight,
          colorCompoundBrandBackgroundPressed: hcHighlight,
          colorBrandBackgroundStatic: hcCanvas,
          colorBrandBackground2: hcButtonFace,
          colorBrandBackgroundInverted: hcButtonFace,
          colorBrandBackgroundInvertedHover: hcHighlight,
          colorBrandBackgroundInvertedPressed: hcHighlight,
          colorBrandBackgroundInvertedSelected: hcHighlight,
          colorNeutralStrokeAccessible: hcCanvasText,
          colorNeutralStrokeAccessibleHover: hcHighlight,
          colorNeutralStrokeAccessiblePressed: hcHighlight,
          colorNeutralStrokeAccessibleSelected: hcHighlight,
          colorNeutralStroke1: hcCanvasText,
          colorNeutralStroke1Hover: hcHighlight,
          colorNeutralStroke1Pressed: hcHighlight,
          colorNeutralStroke1Selected: hcHighlight,
          colorNeutralStroke2: hcCanvasText,
          colorNeutralStroke3: hcCanvasText,
          colorNeutralStrokeOnBrand: hcCanvas,
          colorNeutralStrokeOnBrand2: hcCanvasText,
          colorNeutralStrokeOnBrand2Hover: hcCanvasText,
          colorNeutralStrokeOnBrand2Pressed: hcCanvasText,
          colorNeutralStrokeOnBrand2Selected: hcCanvasText,
          colorBrandStroke1: hcCanvasText,
          colorBrandStroke2: hcCanvasText,
          colorCompoundBrandStroke: hcHighlight,
          colorCompoundBrandStrokeHover: hcHighlight,
          colorCompoundBrandStrokePressed: hcHighlight,
          colorNeutralStrokeDisabled: hcDisabled,
          colorNeutralStrokeInvertedDisabled: hcDisabled,
          colorTransparentStroke: hcCanvasText,
          colorTransparentStrokeInteractive: hcHighlight,
          colorTransparentStrokeDisabled: hcDisabled,
          colorStrokeFocus1: hcCanvas,
          colorStrokeFocus2: hcHighlight,
          colorNeutralShadowAmbient: 'rgba(0,0,0,0.24)',
          colorNeutralShadowKey: 'rgba(0,0,0,0.28)',
          colorNeutralShadowAmbientLighter: 'rgba(0,0,0,0.12)',
          colorNeutralShadowKeyLighter: 'rgba(0,0,0,0.14)',
          colorNeutralShadowAmbientDarker: 'rgba(0,0,0,0.40)',
          colorNeutralShadowKeyDarker: 'rgba(0,0,0,0.48)',
          colorBrandShadowAmbient: 'rgba(0,0,0,0.30)',
          colorBrandShadowKey: 'rgba(0,0,0,0.25)',
        }),
        createHighContrastTheme = () => {
          let colorTokens = highContrastColor_generateColorTokens();
          return {
            ...borderRadius,
            ...fontSizes,
            ...lineHeights,
            ...fontFamilies,
            ...fontWeights,
            ...strokeWidths,
            ...horizontalSpacings,
            ...verticalSpacings,
            ...durations,
            ...curves,
            ...colorTokens,
            ...highContrastColorPalette_colorPaletteTokens,
            ...createShadowTokens(colorTokens.colorNeutralShadowAmbient, colorTokens.colorNeutralShadowKey),
            ...createShadowTokens(colorTokens.colorBrandShadowAmbient, colorTokens.colorBrandShadowKey, 'Brand'),
          };
        },
        teamsHighContrastTheme = createHighContrastTheme(),
        themes = [
          { id: 'web-light', label: 'Web Light', theme: webLightTheme },
          { id: 'web-dark', label: 'Web Dark', theme: webDarkTheme },
          { id: 'teams-light', label: 'Teams Light', theme: teamsLightTheme },
          { id: 'teams-dark', label: 'Teams Dark', theme: teamsDarkTheme },
          { id: 'teams-high-contrast', label: 'Teams High Contrast', theme: teamsHighContrastTheme },
        ],
        defaultTheme = themes[0],
        ADDON_ID = 'storybook/fluentui-react-addon',
        THEME_ID = `${ADDON_ID}/theme`,
        STRICT_MODE_ID = `${ADDON_ID}/strict-mode`,
        findTheme = themeId => {
          if (themeId) return themes.find(value => value.id === themeId);
        },
        getActiveFluentTheme = globals => {
          var _a;
          let selectedThemeId = globals[THEME_ID],
            { theme } = null !== (_a = findTheme(selectedThemeId)) && void 0 !== _a ? _a : defaultTheme;
          return { theme };
        },
        withFluentProvider = (StoryFn, context) => {
          let { globals, parameters } = context,
            { mode } = parameters,
            isVrTest = 'vr-test' === mode,
            globalTheme = getActiveFluentTheme(globals),
            paramTheme = findTheme(parameters.fluentTheme),
            { theme } = null != paramTheme ? paramTheme : globalTheme;
          return react.createElement(
            FluentProvider,
            { theme: theme, dir: parameters.dir },
            isVrTest ? StoryFn() : react.createElement(FluentExampleContainer, { theme: theme }, StoryFn()),
          );
        },
        FluentExampleContainer = props => {
          let { theme } = props,
            backgroundColor = theme.colorNeutralBackground2;
          return react.createElement('div', { style: { padding: '48px 24px', backgroundColor } }, props.children);
        },
        withReactStrictMode = (StoryFn, context) => {
          var _a;
          let isActive = null !== (_a = context.globals[STRICT_MODE_ID]) && void 0 !== _a && _a;
          return react.createElement(StrictModeWrapper, { strictMode: isActive }, StoryFn());
        },
        StrictModeWrapper = props =>
          props.strictMode ? react.createElement(react.StrictMode, null, props.children) : props.children,
        decorators = [withFluentProvider, withReactStrictMode];
    },
    './storybook-config-entry.js': (
      __unused_webpack_module,
      __unused_webpack___webpack_exports__,
      __webpack_require__,
    ) => {
      'use strict';
      var global_window = __webpack_require__('./node_modules/global/window.js'),
        window_default = __webpack_require__.n(global_window),
        PreviewWeb = __webpack_require__('./node_modules/@storybook/preview-web/dist/esm/PreviewWeb.js'),
        composeConfigs = __webpack_require__('./node_modules/@storybook/store/dist/esm/csf/composeConfigs.js'),
        ClientApi = __webpack_require__('./node_modules/@storybook/client-api/dist/esm/ClientApi.js'),
        esm = __webpack_require__('./node_modules/@storybook/addons/dist/esm/index.js'),
        dist_esm = __webpack_require__('./node_modules/@storybook/channel-postmessage/dist/esm/index.js'),
        channel_websocket_dist_esm = __webpack_require__(
          './node_modules/@storybook/channel-websocket/dist/esm/index.js',
        );
      let importers = [];
      async function importFn(path) {
        for (let i = 0; i < importers.length; i++) {
          let moduleExports = await importers[i](path);
          if (moduleExports) return moduleExports;
        }
      }
      let { SERVER_CHANNEL_URL } = window_default(),
        getProjectAnnotations = () =>
          (0, composeConfigs.mm)([
            __webpack_require__('./node_modules/@storybook/react/dist/esm/client/docs/config.js'),
            __webpack_require__('./node_modules/@storybook/react/dist/esm/client/preview/config.js'),
            __webpack_require__('./node_modules/@storybook/addon-docs/preview.js'),
            __webpack_require__('./node_modules/@storybook/addon-actions/preview.js'),
            __webpack_require__('./node_modules/@storybook/addon-backgrounds/preview.js'),
            __webpack_require__('./node_modules/@storybook/addon-measure/preview.js'),
            __webpack_require__('./node_modules/@storybook/addon-outline/preview.js'),
            __webpack_require__('./node_modules/@storybook/addon-a11y/preview.js'),
            __webpack_require__('./node_modules/@storybook/addon-links/preview.js'),
            __webpack_require__('./node_modules/@storybook/addon-knobs/dist/preset/addDecorator.js'),
            __webpack_require__('./node_modules/storybook-addon-export-to-codesandbox/dist/esm/preset/preview.js'),
            __webpack_require__('./packages/react-components/react-storybook-addon/lib/preset/preview.js'),
            __webpack_require__('./.storybook/preview.js'),
          ]),
        channel = (0, dist_esm.ZP)({ page: 'preview' });
      if ((esm.KP.setChannel(channel), SERVER_CHANNEL_URL)) {
        let serverChannel = (0, channel_websocket_dist_esm.Z)({ url: SERVER_CHANNEL_URL });
        esm.KP.setServerChannel(serverChannel), (window.__STORYBOOK_SERVER_CHANNEL__ = serverChannel);
      }
      let preview = new PreviewWeb.$();
      (window.__STORYBOOK_PREVIEW__ = preview),
        (window.__STORYBOOK_STORY_STORE__ = preview.storyStore),
        (window.__STORYBOOK_ADDONS_CHANNEL__ = channel),
        (window.__STORYBOOK_CLIENT_API__ = new ClientApi.ti({ storyStore: preview.storyStore })),
        preview.initialize({ importFn: importFn, getProjectAnnotations });
    },
    '?4f7e': () => {},
  },
  __webpack_require__ => {
    var __webpack_exec__ = moduleId => __webpack_require__((__webpack_require__.s = moduleId));
    __webpack_require__.O(
      0,
      [216],
      () => (
        __webpack_exec__('./node_modules/@storybook/core-client/dist/esm/globals/polyfills.js'),
        __webpack_exec__('./node_modules/@storybook/core-client/dist/esm/globals/globals.js'),
        __webpack_exec__('./storybook-config-entry.js')
      ),
    );
    var __webpack_exports__ = __webpack_require__.O();
  },
]);
